{"version":3,"sources":["questions/utils/getTables.js","questions/selectAll.js","questions/utils/getColumns.js","questions/selectSpecific.js","questions/selectUnique.js","questions/utils/getRows.js","questions/basicWhere.js","questions/whereIn.js","questions/utils/getRandomConjunction.js","questions/whereConjunction.js","questions/orderBy.js","questions/orderByMultiple.js","questions/selectNull.js","questions/limitAndOrder.js","questions/like.js","questions/between.js","questions/minMaxAvg.js","questions/count.js","questions/alias.js","questions/index.js"],"names":["getTables","db","x","Object","keys","window","questionCache","length","exec","tables","values","forEach","table","tableArray","Error","Math","floor","random","sampleSize","selectAll","set","build","question","answer","getColumns","type","notnull","sameTable","result","i","columns","shuffledColumns","shuffle","j","indexOf","push","column","selectSpecific","column_1","column_2","selectUnique","getRows","rows","flatten","basicWhere","title","column_3","row","whereIn","row_1","row_2","row_3","conjunctions","code","text","getRandomConjunction","getRandomInt","whereConjunction","operator_code","operator_text","orderBy","orderByMultiple","selectNull","nullOrNot","lenth","null_code","null_text","undefined","limitAndOrder","randomInt","like","truncatedRow","substring","round","firstRandomInt","secondRandomInt","between","sort","row1","row2","minMaxAvg","textual","func","count","columnAlias","alias_1","substr","alias_2"],"mappings":"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","file":"static/js/10.000795e8.chunk.js","sourcesContent":["import sampleSize from \"lodash/sampleSize\";\r\n\r\nconst getTables = (db, x = null) => {\r\n  // If no cache currently exists, populate one.\r\n  if (Object.keys(window.questionCache).length === 0) {\r\n    const [{ values: tables }] = db.exec(\r\n      `SELECT \"tbl_name\" FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"tbl_name\" != \"ts-questions\"`\r\n    );\r\n\r\n    tables.forEach(([table]) => (window.questionCache[table] = []));\r\n  }\r\n\r\n  const tableArray = Object.keys(window.questionCache);\r\n\r\n  // If no count is specified just return all the tables.\r\n  if (!x) {\r\n    return tableArray;\r\n  }\r\n\r\n  // Did we recieve the wanted number of tables back?\r\n  if (tableArray.length < x) {\r\n    throw new Error(`Not enough tables found in the database.`);\r\n  }\r\n\r\n  // If only 1 table was requested, return a random element.\r\n  if (x === 1) {\r\n    return [tableArray[Math.floor(Math.random() * tableArray.length)]];\r\n  }\r\n\r\n  return sampleSize(tableArray, x);\r\n};\r\n\r\nexport default getTables;\r\n","import getTables from \"./utils/getTables\";\r\n\r\nconst selectAll = {\r\n  set: \"Easy\",\r\n  build: db => {\r\n    let [table] = getTables(db, 1);\r\n\r\n    return {\r\n      question: `Display all **${table}**`,\r\n      answer: `SELECT * FROM ${table}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default selectAll;\r\n","import shuffle from \"lodash/shuffle\";\r\n\r\nconst COLUMN_ID = 0; // eslint-disable-line no-unused-vars\r\nconst COLUMN_NAME = 1;\r\nconst COLUMN_TYPE = 2; // eslint-disable-line no-unused-vars\r\nconst COLUMN_NOT_NULL = 3;\r\nconst DEFAULT = 4; // eslint-disable-line no-unused-vars\r\nconst PRIMARY_KEY = 5; // eslint-disable-line no-unused-vars\r\n\r\nconst getColumns = (db, tables, x = 1, type, notnull, sameTable = true) => {\r\n  const result = [];\r\n\r\n  for (let i = 0; i < tables.length && x > result.length; ++i) {\r\n    // Check if we have a column cache for this table.\r\n    if (\r\n      !window.questionCache[tables[i]] ||\r\n      window.questionCache[tables[i]].length === 0\r\n    ) {\r\n      const [{ values: columns }] = db.exec(`PRAGMA table_info(${tables[i]})`);\r\n\r\n      // If not set one.\r\n      window.questionCache[tables[i]] = columns;\r\n    }\r\n\r\n    // Shuffle the columns for improved randomness.\r\n    const shuffledColumns = shuffle(window.questionCache[tables[i]]);\r\n\r\n    for (let j = 0; j < shuffledColumns.length && x > result.length; ++j) {\r\n      // Strict undefined check as \"not null\" can be false.\r\n      if (\r\n        typeof notnull !== \"undefined\" &&\r\n        shuffledColumns[j][COLUMN_NOT_NULL] !== +notnull\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      if (type && shuffledColumns[j][COLUMN_TYPE].indexOf(type) === -1) {\r\n        continue;\r\n      }\r\n\r\n      result.push({\r\n        table: tables[i],\r\n        column: shuffledColumns[j][COLUMN_NAME]\r\n      });\r\n    }\r\n\r\n    // If we need 'x' columns from this table, but it doesn't have that many, remove all and try again\r\n    if (sameTable && result.length < x) result.length = 0;\r\n  }\r\n\r\n  if (x && result.length !== x) {\r\n    throw new Error(`Not enough columns found in the database.`);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default getColumns;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nconst selectSpecific = {\r\n  set: \"Easy\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }, { column: column_2 }] = getColumns(\r\n      db,\r\n      tables,\r\n      2\r\n    );\r\n\r\n    return {\r\n      question: `Display all **${table}** only displaying **${column_1}** and **${column_2}**.`,\r\n      answer: `SELECT ${column_1}, ${column_2} FROM ${table}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default selectSpecific;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nconst selectUnique = {\r\n  set: \"Easy\",\r\n  build: db => {\r\n    const tables = getTables(db, 1);\r\n\r\n    const [{ table, column }] = getColumns(db, tables);\r\n\r\n    return {\r\n      question: `Display all the unique **${column}**'s that exist in **${table}**`,\r\n      answer: `SELECT DISTINCT ${column} FROM ${table}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default selectUnique;\r\n","import flatten from \"lodash/flatten\";\r\n\r\nconst getRows = (db, table, column, x = 1) => {\r\n  const [{ values: rows }] = db.exec(\r\n    `SELECT \"${column}\" FROM \"${table}\" ORDER BY RANDOM() LIMIT ${x}`\r\n  );\r\n\r\n  if (rows.length < x) {\r\n    throw new Error(`The table doesn't contain enough rows.`);\r\n  }\r\n\r\n  // Flatten the array of tables.\r\n  // Could use multiple flatten-ing methods;\r\n  // however my (brief) tests show the lodash methods beats ES5 and ES6 flattens by over 100%.\r\n  // [].concat(...rows);\r\n  // rows.reduce((acc, val) => acc.concat(val), []);\r\n  return flatten(rows);\r\n};\r\n\r\nexport default getRows;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\nimport getRows from \"./utils/getRows\";\r\n\r\nconst basicWhere = {\r\n  set: \"Easy\",\r\n  title: \"Basic WHERE clause\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [\r\n      { table, column: column_1 },\r\n      { column: column_2 },\r\n      { column: column_3 }\r\n    ] = getColumns(db, tables, 3);\r\n\r\n    const [row] = getRows(db, table, column_3, 1);\r\n\r\n    return {\r\n      question: `Display the **${column_1}**'s and **${column_2}**'s from **${table}** that have a **${column_3}** of **${row}**`,\r\n      answer: `SELECT ${column_1}, ${column_2} FROM ${table} WHERE ${column_3} = \"${row}\"`\r\n    };\r\n  }\r\n};\r\n\r\nexport default basicWhere;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\nimport getRows from \"./utils/getRows\";\r\n\r\nconst whereIn = {\r\n  set: \"Easy\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }] = getColumns(db, tables);\r\n\r\n    const [row_1, row_2, row_3] = getRows(db, table, column_1, 3);\r\n\r\n    return {\r\n      question: `Display all the **${table}** where **${column_1}** is **${row_1}** or **${row_2}** or **${row_3}**, using the \\`IN()\\` operator`,\r\n      answer: `SELECT * FROM ${table} WHERE ${column_1} IN(\"${row_1}\", \"${row_2}\", \"${row_3}\")`\r\n    };\r\n  }\r\n};\r\n\r\nexport default whereIn;\r\n","import getRandomInt from \"lodash/random\";\r\n\r\nexport const conjunctions = [\r\n  {\r\n    code: \"and\",\r\n    text: \"and\"\r\n  },\r\n  {\r\n    code: \"or\",\r\n    text: \"or\"\r\n  }\r\n];\r\n\r\nconst getRandomConjunction = () => {\r\n  return conjunctions[getRandomInt(conjunctions.length - 1)];\r\n};\r\n\r\nexport default getRandomConjunction;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\nimport getRows from \"./utils/getRows\";\r\n\r\nimport getRandomConjunction from \"./utils/getRandomConjunction\";\r\n\r\nconst whereConjunction = {\r\n  set: \"Easy\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }, { column: column_2 }] = getColumns(\r\n      db,\r\n      tables,\r\n      3,\r\n      \"VARCHAR\"\r\n    );\r\n\r\n    const [row_1] = getRows(db, table, column_1, 1);\r\n    const [row_2] = getRows(db, table, column_2, 1);\r\n\r\n    const { code: operator_code, text: operator_text } = getRandomConjunction();\r\n\r\n    return {\r\n      question: `Display the **${table}** where **${column_1}** is **${row_1}** ${operator_text} **${column_2}** is **${row_2}**`,\r\n      answer: `SELECT * FROM ${table} WHERE ${column_1} = \"${row_1}\" ${operator_code} ${column_2} = \"${row_2}\"`\r\n    };\r\n  }\r\n};\r\n\r\nexport default whereConjunction;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nconst orderBy = {\r\n  set: \"Intermediate\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }] = getColumns(db, tables, 1, \"INTEGER\");\r\n\r\n    return {\r\n      question: `Display the **${table}** showing the largest **${column_1}** first.`,\r\n      answer: `SELECT * FROM ${table} ORDER BY ${column_1} DESC`\r\n    };\r\n  }\r\n};\r\n\r\nexport default orderBy;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nconst orderByMultiple = {\r\n  set: \"Intermediate\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }, { column: column_2 }] = getColumns(\r\n      db,\r\n      tables,\r\n      2,\r\n      \"INTEGER\"\r\n    );\r\n\r\n    return {\r\n      question: `Display the **${table}** showing the **${table}** with the highest **${column_1}** first, secondly sorting by the lowest **${column_2}**`,\r\n      answer: `SELECT * FROM ${table} ORDER BY ${column_1} DESC, ${column_2} ASC`\r\n    };\r\n  }\r\n};\r\n\r\nexport default orderByMultiple;\r\n","import getRandomInt from \"lodash/random\";\r\nimport getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nconst selectNull = {\r\n  set: \"Intermediate\",\r\n  build: db => {\r\n    const nullOrNot = [[\"NOT\", \"not\"], [\"\", \"\"]];\r\n    // Random \"NOT\". Otherwise blank.\r\n    const [null_code, null_text] = nullOrNot[getRandomInt(nullOrNot.lenth)];\r\n\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }] = getColumns(\r\n      db,\r\n      tables,\r\n      1,\r\n      undefined,\r\n      false\r\n    );\r\n\r\n    return {\r\n      question: `Get a list of all the **${table}** where the **${column_1}** is ${null_text} a null value`,\r\n      answer: `SELECT * FROM ${table} WHERE ${column_1} IS ${null_code} NULL`\r\n    };\r\n  }\r\n};\r\n\r\nexport default selectNull;\r\n","import getRandomInt from \"lodash/random\";\r\nimport getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nconst limitAndOrder = {\r\n  set: \"Intermediate\",\r\n  build: db => {\r\n    // Get a random limit number between 5-10\r\n    const randomInt = getRandomInt(5, 10);\r\n\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }] = getColumns(db, tables, 1, \"INTEGER\");\r\n\r\n    const [{ column: column_2 }, { column: column_3 }] = getColumns(\r\n      db,\r\n      [table],\r\n      2\r\n    );\r\n\r\n    return {\r\n      question: `Find the top ${randomInt} **${table}** with the highest **${column_1}**, showing the **${column_1}**, **${column_2}**, and **${column_3}** of each ${table}.`,\r\n      answer: `SELECT ${column_1}, ${column_2}, ${column_3} FROM ${table} ORDER BY ${column_1} DESC LIMIT ${randomInt}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default limitAndOrder;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\nimport getRows from \"./utils/getRows\";\r\n\r\nimport getRandomInt from \"lodash/random\";\r\n\r\nconst like = {\r\n  set: \"Hard\",\r\n  build: db => {\r\n    const tables = getTables(db, 3);\r\n\r\n    const [{ table, column }] = getColumns(db, tables, 1, \"VARCHAR\");\r\n\r\n    let [row] = getRows(db, table, column, 1);\r\n\r\n    // Three options get a random number between 0 and 2.\r\n    let random = getRandomInt(2);\r\n\r\n    let question = `Display all the **${table}** where the **${column}** `;\r\n    let answer = `SELECT * FROM ${table} WHERE ${column} LIKE `;\r\n\r\n    if (random === 1) {\r\n      // Starts with...\r\n      const truncatedRow = row.substring(\r\n        0,\r\n        getRandomInt(1, Math.round(row.length / 1.5))\r\n      );\r\n\r\n      answer += `\"${truncatedRow}%\"`;\r\n      question += `starts with **${truncatedRow}**`;\r\n    } else if (random === 2) {\r\n      // Ends with...\r\n      const truncatedRow = row.substring(\r\n        row.length - getRandomInt(2, Math.round(row.length / 1.5))\r\n      );\r\n\r\n      answer += `\"%${truncatedRow}\"`;\r\n      question += `ends with **${truncatedRow}**`;\r\n    } else {\r\n      // Contains...\r\n      const firstRandomInt = getRandomInt(0, Math.round(row.length / 1.5));\r\n      const secondRandomInt = getRandomInt(firstRandomInt + 1, row.length);\r\n\r\n      const truncatedRow = row.substring(firstRandomInt, secondRandomInt);\r\n\r\n      answer += `\"%${truncatedRow}%\"`;\r\n      question += `contains **${truncatedRow}**`;\r\n    }\r\n\r\n    return {\r\n      question,\r\n      answer\r\n    };\r\n  }\r\n};\r\n\r\nexport default like;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\nimport getRows from \"./utils/getRows\";\r\n\r\nconst between = {\r\n  title: \"Between clause\",\r\n  set: \"Hard\",\r\n  build: db => {\r\n    const tables = getTables(db, 1);\r\n\r\n    const [{ table, column }] = getColumns(db, tables, 1, \"INT\");\r\n\r\n    const rows = getRows(db, table, column, 2);\r\n\r\n    // Sort them into largest to smallest number.\r\n    // Just so the between clause actually reads better.\r\n    rows.sort();\r\n\r\n    const [row1, row2] = rows;\r\n\r\n    let question = `Display all the **${table}** where the **${column}** is between **${row1}** and **${row2}**. Use the SQL condition \\`BETWEEN()\\`.`;\r\n    let answer = `SELECT * FROM ${table} WHERE ${column} BETWEEN \"${row1}\" AND \"${row2}\"`;\r\n\r\n    return {\r\n      question,\r\n      answer\r\n    };\r\n  }\r\n};\r\n\r\nexport default between;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nimport getRandomInt from \"lodash/random\";\r\n\r\nconst minMaxAvg = {\r\n  set: \"Intermediate\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column }] = getColumns(db, tables, 1, \"INT\");\r\n\r\n    const { textual, func } = [\r\n      { textual: \"largest\", func: \"MAX\" },\r\n      { textual: \"smallest\", func: \"MIN\" },\r\n      { textual: \"average\", func: \"AVG\" }\r\n    ][getRandomInt(2)];\r\n\r\n    return {\r\n      question: `Return the ${textual} **${column}** in **${table}**. Use the function \\`${func}()\\`.`,\r\n      answer: `SELECT ${func}(${column}) FROM ${table}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default minMaxAvg;\r\n","import getTables from \"./utils/getTables\";\r\n\r\nconst count = {\r\n  set: \"Intermediate\",\r\n  build: db => {\r\n    const table = getTables(db, 1);\r\n\r\n    return {\r\n      question: `How many **${table}** are there?`,\r\n      answer: `SELECT COUNT(*) FROM ${table}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default count;\r\n","import getTables from \"./utils/getTables\";\r\nimport getColumns from \"./utils/getColumns\";\r\n\r\nconst columnAlias = {\r\n  set: \"Intermediate\",\r\n  title: \"Basic WHERE clause\",\r\n  build: db => {\r\n    const tables = getTables(db);\r\n\r\n    const [{ table, column: column_1 }, { column: column_2 }] = getColumns(\r\n      db,\r\n      tables,\r\n      2\r\n    );\r\n\r\n    // Create some example alias column names.\r\n    // This is basically the first letter of the column names.\r\n    // Accounting for column name clashes, in which case will result in \"A\" or \"B\".\r\n    let alias_1 = column_1.substr(0, 1);\r\n    let alias_2 = column_2.substr(0, 1);\r\n\r\n    // Check that the aliases aren't the same.\r\n    if (alias_1 === alias_2) {\r\n      // Change them to \"A\" and \"B\".\r\n      alias_1 = \"A\";\r\n      alias_2 = \"B\";\r\n    }\r\n\r\n    return {\r\n      question: `Select the columns ${column_1} and ${column_2} assigning them the following aliases: **${alias_1}** and **${alias_2}**, _respectively_.`,\r\n      answer: `SELECT ${column_1} AS \"${alias_1}\", ${column_2} AS \"${alias_2}\" FROM ${table}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default columnAlias;\r\n","import selectAll from \"./selectAll\";\r\nimport selectSpecific from \"./selectSpecific\";\r\nimport selectUnique from \"./selectUnique\";\r\nimport basicWhere from \"./basicWhere\";\r\nimport whereIn from \"./whereIn\";\r\nimport whereConjunction from \"./whereConjunction\";\r\nimport orderBy from \"./orderBy\";\r\nimport orderByMultiple from \"./orderByMultiple\";\r\nimport selectNull from \"./selectNull\";\r\nimport limitAndOrder from \"./limitAndOrder\";\r\nimport like from \"./like\";\r\nimport between from \"./between\";\r\nimport minMaxAvg from \"./minMaxAvg\";\r\nimport count from \"./count\";\r\nimport columnAlias from \"./alias\";\r\n\r\nexport default [\r\n  selectAll,\r\n  selectSpecific,\r\n  selectUnique,\r\n  basicWhere,\r\n  whereIn,\r\n  whereConjunction,\r\n  orderBy,\r\n  orderByMultiple,\r\n  selectNull,\r\n  limitAndOrder,\r\n  like,\r\n  between,\r\n  minMaxAvg,\r\n  count,\r\n  columnAlias\r\n];\r\n"],"sourceRoot":""}