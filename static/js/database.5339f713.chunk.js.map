{"version":3,"sources":["components/Database/utils/default.sqlite","components/Database/utils/toBinArray.js","components/Database/utils/getDatabase.js","components/Database/utils/toBinString.js","components/Database/utils/saveDatabase.js","components/Database/Provider.js"],"names":["module","exports","toBinArray","string","length","typedArray","Uint8Array","i","charCodeAt","getDatabase","Promise","resolve","reject","a","cachedDatabase","localStorage","getItem","fetch","defaultDatabase","then","res","arrayBuffer","toBinString","reduce","data","byte","String","fromCharCode","saveDatabase","database","setItem","export","Provider","loadDatabase","initSqlJs","SQL","Database","lastModified","Date","now","setState","state","this","value","props","children","React","Component"],"mappings":"yMAAAA,EAAOC,QAAU,IAA0B,wC,+KCQ5BC,EARI,SAAAC,GAGjB,IAFA,IAAMC,EAASD,EAAOC,OAChBC,EAAa,IAAIC,WAAWF,GACzBG,EAAI,EAAGA,EAAIH,EAAQG,IAAKF,EAAWE,GAAKJ,EAAOK,WAAWD,GAEnE,OAAOF,G,kBCmBMI,EApBK,kBAClB,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAAC,EAAA,2DACJC,EAAiBC,aAAaC,QAAQ,yBADlC,gBAMRX,EAAaH,EAAWY,GANhB,sCASFG,MAAMC,KACTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,iBAChBF,MAAK,SAAAE,GACJhB,EAAa,IAAIC,WAAWe,MAZxB,gCAgBHV,EAAQN,IAhBL,2CAAZ,0DCFaiB,EAHK,SAAAjB,GAAU,OAC5BA,EAAWkB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOE,OAAOC,aAAaF,KAAO,KCIvDG,EAHM,SAAAC,GAAQ,OAC3Bd,aAAae,QAAQ,uBAAwBR,EAAYO,EAASE,Y,QCM/CC,E,4MACnBC,a,uCAAe,WAAO5B,GAAP,iBAAAQ,EAAA,sEACKqB,MADL,cACPC,EADO,QAIPN,EAAW,IAAIM,EAAIC,SAAS/B,IAEzBgC,aAAeC,KAAKC,MAG7BX,EAAaC,GATA,kBAWN,EAAKW,SAAS,CAAEX,cAXV,2C,wDAcfY,MAAQ,CACNZ,SAAU,KACVI,aAAc,EAAKA,c,kMAKIxB,I,OAAjBoB,E,OAENa,KAAKT,aAAaJ,G,qIAIlB,OACE,kBAAC,IAAgBG,SAAjB,CAA0BW,MAAOD,KAAKD,OACnCC,KAAKE,MAAMC,c,GA9BkBC,IAAMC","file":"static/js/database.5339f713.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.ec7c6a0d.sqlite\";","const toBinArray = string => {\r\n  const length = string.length;\r\n  const typedArray = new Uint8Array(length);\r\n  for (let i = 0; i < length; i++) typedArray[i] = string.charCodeAt(i);\r\n\r\n  return typedArray;\r\n};\r\n\r\nexport default toBinArray;\r\n","import toBinArray from \"./toBinArray\";\r\n\r\nimport defaultDatabase from \"./default.sqlite\";\r\n\r\nconst getDatabase = () =>\r\n  new Promise(async (resolve, reject) => {\r\n    const cachedDatabase = localStorage.getItem(\"__testSQL_Database__\");\r\n\r\n    let typedArray;\r\n\r\n    if (cachedDatabase) {\r\n      typedArray = toBinArray(cachedDatabase);\r\n    } else {\r\n      // No cached database, load the default database.\r\n      await fetch(defaultDatabase)\r\n        .then(res => res.arrayBuffer())\r\n        .then(arrayBuffer => {\r\n          typedArray = new Uint8Array(arrayBuffer);\r\n        });\r\n    }\r\n\r\n    return resolve(typedArray);\r\n  });\r\n\r\nexport default getDatabase;\r\n","const toBinString = typedArray =>\r\n  typedArray.reduce((data, byte) => data + String.fromCharCode(byte), \"\");\r\n\r\nexport default toBinString;\r\n","import toBinString from \"./toBinString\";\r\n\r\nconst saveDatabase = database =>\r\n  localStorage.setItem(\"__testSQL_Database__\", toBinString(database.export()));\r\n\r\nexport default saveDatabase;\r\n","import React from \"react\";\r\n\r\nimport initSqlJs from \"sql.js/dist/sql-wasm\";\r\n\r\nimport getDatabase from \"./utils/getDatabase\";\r\nimport saveDatabase from \"./utils/saveDatabase\";\r\n\r\nimport DatabaseContext from \"./Context\";\r\n\r\nexport default class Provider extends React.Component {\r\n  loadDatabase = async (typedArray) => {\r\n    const SQL = await initSqlJs();\r\n\r\n    // Create a new SQL object\r\n    const database = new SQL.Database(typedArray);\r\n\r\n    database.lastModified = Date.now();\r\n\r\n    // Save the database in the cache, for persistence without reliance of the server.\r\n    saveDatabase(database);\r\n\r\n    return this.setState({ database });\r\n  };\r\n\r\n  state = {\r\n    database: null,\r\n    loadDatabase: this.loadDatabase,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Get a database from \"somewhere\"; localStorage or the default server-side.\r\n    const database = await getDatabase();\r\n\r\n    this.loadDatabase(database);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DatabaseContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </DatabaseContext.Provider>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}