{"version":3,"sources":["components/Auth/Context.js","components/Auth/API.js","components/Auth/Provider.js","components/Group/index.js","components/SavedDatabase/index.js","components/Auth/LoggedIn.js","components/Auth/Guest.js","components/Auth/index.js","components/Layout/Section.js","components/Question/index.js","components/Database/Output.js","components/Feedback/index.js","components/Question/answer.js","questions/utils/buildQuestions.js","questions/utils/saveQuestions.js","components/Database/Input.js","components/Layout/Main.js","components/Schema/Item.js","components/Schema/index.js","components/Database/Upload.js","components/Database/Download.js","components/Layout/Sidebar.js","components/Layout/Container.js","components/Layout/index.js","App.js","serviceWorker.js","index.js","utils/handleError.js","components/Database/Context.js","components/Group/API.js"],"names":["UserContext","React","createContext","user","login","refresh","logout","username","password","data","fetch","method","body","JSON","stringify","credentials","headers","Headers","then","handleError","response","json","getCurrentUser","Provider","setState","joinGroup","group","prevState","leaveGroup","a","isLoaded","state","this","value","props","children","Component","LoadableGroupManager","lazy","Group","open","handleOpen","handleClose","currentGroup","joinGroupHandler","leaveGroupHandler","loadDatabaseHandler","Fragment","Tooltip","title","IconButton","color","aria-label","onClick","onMouseOver","handleMouseOver","fontSize","fallback","closeHandler","LoadableDatabaseManager","SavedDatabase","currentDatabase","disabled","style","display","withStyles","theme","sidebarToggleIcon","marginRight","marginLeft","breakpoints","up","userActionsContainer","AppBar","position","Toolbar","Hidden","implementation","mdUp","className","classes","sidebarToggleHandler","Typography","variant","noWrap","seperator","margin","spacing","padding","other","paperStyle","component","gutterBottom","Paper","elevation","square","QuestionManager","allSetNames","activeSet","activeQuestionSet","componentDidUpdate","prevProps","allQuestions","activeQuestionIndex","activeQuestion","completed","filter","question","set","includes","Set","map","handleNext","next","index","length","allQuestionsIndex","changeQuestionHandler","handlePrev","prevIndex","prev","handleQuestionChange","handleSetChange","event","target","activeStep","indexOf","Stepper","innerPadding","nonLinear","Step","key","StepButton","stepperButton","Boolean","StepLabel","iconContainer","stepperLabel","StepIconProps","active","completedStep","error","Divider","dangerouslySetInnerHTML","__html","marked","bottomActions","Select","onChange","name","MenuItem","Button","previousButton","size","xsDown","nextButton","overflow","divider","marginBottom","justifyContent","alignItems","marginTop","DatabaseOutput","columns","values","Table","TableHead","TableRow","i","TableCell","TableBody","row","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","Feedback","queue","message","timestamp","reason","processQueue","shift","handleExited","push","Icon","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","onExited","aria-describedby","id","classNames","icon","iconVariant","action","backgroundColor","green","palette","dark","primary","amber","opacity","IncorrectAnswer","Error","normalize","string","toLowerCase","replace","checkAnswer","db","sql","keywords","sqlUppercase","toUpperCase","lastIndex","userResults","exec","modelResults","answer","userColumns","userValues","modelColumns","modelValues","join","normalizedUserColumns","column","normalizedModelColumns","forEach","userColumnIndex","modelColumnIndex","userColumnValues","result","foundIndex","splice","buildQuestions","database","availableQuestions","Promise","resolve","window","questionCache","questions","default","reduce","acc","cur","build","saveQuestions","localStorage","setItem","DatabaseInput","statement","handleChange","handleClear","handleSubmit","submitHandler","mode","showPrintMargin","focus","height","width","wrapEnabled","button","rightIcon","leftIcon","iconSmall","codemirror","border","grey","Main","feedback","changeFeedback","Date","getTime","getQuestions","cachedQuestions","getItem","parse","saveProgress","changeQuestion","runQuery","loadDatabase","results","output","getRowsModified","completeCurrentQuestion","updatedAllQuestions","updateResultsHandler","Object","is","hasLeftGroup","hasDatabaseChanged","filename","innerContainerStyle","toolbar","Question","Input","Output","changeHandler","flexGrow","mixins","SchemaItem","handleClick","showSchemaHandler","render","ListItem","ListItemText","ListItemSecondaryAction","secondary","count","Schema","schema","load","tableName","nextProps","nextState","lastModified","align","List","dense","displayNone","UploadDatabase","handleUpload","e","files","file","fileReader","FileReader","onload","typedArray","Uint8Array","uploadDatabaseHandler","readAsArrayBuffer","Consumer","accept","type","DownloadDatabase","handleDownload","blob","Blob","export","FileSaver","saveAs","Sidebar","handleToggleSidebar","toggleSidebarHandler","schemaActions","drawerBottomActions","Upload","Download","container","Drawer","anchor","docked","drawerDocked","paper","drawerPaper","ModalProps","keepMounted","gutterTop","smDown","containerStyle","flexDirection","zIndex","Container","handleUpdateResults","displaySchema","openSidebar","Layout","LoadableDatabaseProvider","App","CssBaseline","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","res","ok","DatabaseContext","createGroup","databaseID","updateGroup","groupId","getGroup","removeUserFromGroup","userId","listGroups","leaveCurrentGroup"],"mappings":"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","file":"static/js/main.6ee1fdb1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst UserContext = React.createContext({\r\n  user: null,\r\n  login: user => {},\r\n  refresh: () => {},\r\n  logout: () => {}\r\n});\r\n\r\nexport default UserContext;\r\n","import handleError from \"../../utils/handleError\";\r\n\r\nexport const login = (username, password) => {\r\n  const data = { username, password };\r\n\r\n  return fetch(\"/api/user/login\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  })\r\n    .then(handleError)\r\n    .then(response => response.json());\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return fetch(\"/api/user/info\", {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  })\r\n    .then(handleError)\r\n    .then(response => response.json());\r\n};\r\n\r\nexport const logout = () => {\r\n  return fetch(\"/api/user/logout\", {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  }).then(handleError);\r\n};\r\n","import React from \"react\";\r\n\r\nimport UserContext from \"./Context\";\r\n\r\nimport { getCurrentUser } from \"./API\";\r\n\r\nexport default class Provider extends React.Component {\r\n  login = user => this.setState({ user });\r\n\r\n  joinGroup = group =>\r\n    this.setState(prevState => ({ user: { ...prevState.user, group } }));\r\n\r\n  leaveGroup = () =>\r\n    this.setState(prevState => ({ user: { ...prevState.user, group: null } }));\r\n\r\n  refresh = async () => {\r\n    try {\r\n      // If this application is client only, no login can occur, don't check.\r\n      const user = process.env.REACT_APP_CLIENT_ONLY\r\n        ? null\r\n        : await getCurrentUser();\r\n\r\n      this.setState({ user, isLoaded: true });\r\n    } catch (e) {\r\n      this.setState({ user: null, isLoaded: true });\r\n    }\r\n  };\r\n\r\n  logout = () => this.setState({ user: null });\r\n\r\n  state = {\r\n    user: null,\r\n    isLoaded: false,\r\n    login: this.login,\r\n    joinGroup: this.joinGroup,\r\n    leaveGroup: this.leaveGroup,\r\n    refresh: this.refresh,\r\n    logout: this.logout\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.refresh();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <UserContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport GroupIcon from \"@material-ui/icons/GroupWorkTwoTone\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst LoadableGroupManager = React.lazy(() =>\r\n  import(\"./GroupManager\" /* webpackChunkName: \"groups\" */)\r\n);\r\n\r\nexport default class Group extends React.Component {\r\n  state = {\r\n    open: false\r\n  };\r\n\r\n  handleOpen = () => this.setState({ open: true });\r\n\r\n  handleClose = () => this.setState({ open: false });\r\n\r\n  render() {\r\n    const { open } = this.state;\r\n\r\n    const {\r\n      currentGroup,\r\n      joinGroupHandler,\r\n      leaveGroupHandler,\r\n      loadDatabaseHandler\r\n    } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Tooltip title=\"Groups\">\r\n          <IconButton\r\n            color={currentGroup ? \"secondary\" : \"inherit\"}\r\n            aria-label=\"Group List\"\r\n            onClick={this.handleOpen}\r\n            onMouseOver={this.handleMouseOver}\r\n          >\r\n            <GroupIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n        {open && (\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <LoadableGroupManager\r\n              closeHandler={this.handleClose}\r\n              currentGroup={currentGroup}\r\n              loadDatabaseHandler={loadDatabaseHandler}\r\n              joinGroupHandler={joinGroupHandler}\r\n              leaveGroupHandler={leaveGroupHandler}\r\n            />\r\n          </Suspense>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport DatabaseIcon from \"@material-ui/icons/StorageTwoTone\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst LoadableDatabaseManager = React.lazy(() =>\r\n  import(\"./DatabaseManager\" /* webpackChunkName: \"saved-databases\" */)\r\n);\r\n\r\nexport default class SavedDatabase extends React.Component {\r\n  state = {\r\n    open: false\r\n  };\r\n\r\n  handleOpen = () => this.setState({ open: true });\r\n\r\n  handleClose = () => this.setState({ open: false });\r\n\r\n  render() {\r\n    const { open } = this.state;\r\n\r\n    const { currentDatabase, loadDatabaseHandler, disabled } = this.props;\r\n\r\n    if (disabled) {\r\n      return (\r\n        <Tooltip title=\"Disabled while in a group\">\r\n          <span style={{ display: \"inline-block\" }}>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"Saved Database Actions\"\r\n              disabled\r\n            >\r\n              <DatabaseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Tooltip title=\"Saved Databases\">\r\n          <span style={{ display: \"inline-block\" }}>\r\n            <IconButton\r\n              onClick={this.handleOpen}\r\n              onMouseOver={this.handleMouseOver}\r\n              color=\"inherit\"\r\n              aria-label=\"Saved Database Actions\"\r\n            >\r\n              <DatabaseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        {open && (\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <LoadableDatabaseManager\r\n              closeHandler={this.handleClose}\r\n              currentDatabase={currentDatabase}\r\n              loadDatabaseHandler={loadDatabaseHandler}\r\n            />\r\n          </Suspense>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n//import PropTypes from 'prop-types';\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport LogoutIcon from \"@material-ui/icons/PowerSettingsNew\";\r\n\r\nimport Group from \"../Group\";\r\nimport SavedDatabase from \"../SavedDatabase\";\r\n\r\nimport DatabaseContext from \"../Database/Context\";\r\n\r\nimport { logout } from \"./API\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nclass LoggedIn extends React.Component {\r\n  handleLogout = () => logout().then(() => this.props.logoutHandler());\r\n\r\n  render() {\r\n    const { user, joinGroup, leaveGroup } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <DatabaseContext.Consumer>\r\n          {({ database: currentDatabase, loadDatabase }) => (\r\n            <React.Fragment>\r\n              <SavedDatabase\r\n                currentDatabase={currentDatabase}\r\n                loadDatabaseHandler={loadDatabase}\r\n                disabled={Boolean(user.group)}\r\n              />\r\n              <Group\r\n                loadDatabaseHandler={loadDatabase}\r\n                currentGroup={user && user.group}\r\n                joinGroupHandler={joinGroup}\r\n                leaveGroupHandler={leaveGroup}\r\n              />\r\n            </React.Fragment>\r\n          )}\r\n        </DatabaseContext.Consumer>\r\n\r\n        <Tooltip title=\"Logout\">\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"Logout\"\r\n            onClick={this.handleLogout}\r\n          >\r\n            <LogoutIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoggedIn;\r\n","import React from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nimport { login } from \"./API\";\r\n\r\nclass Guest extends React.Component {\r\n  state = {\r\n    open: false,\r\n    error: null,\r\n\r\n    username: \"\",\r\n    password: \"\"\r\n  };\r\n\r\n  handleLogin = async () => {\r\n    const { username, password } = this.state;\r\n\r\n    try {\r\n      const user = await login(username, password);\r\n\r\n      return this.props.loginHandler(user);\r\n    } catch (response) {\r\n      const error = await response.text();\r\n\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  handleChange = event =>\r\n    this.setState({ [event.target.id]: event.target.value });\r\n\r\n  handleOpen = () => this.setState({ open: true });\r\n\r\n  handleClose = () => this.setState({ open: false });\r\n\r\n  render() {\r\n    const { error } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Button color=\"inherit\" onClick={this.handleOpen}>\r\n          Login\r\n        </Button>\r\n        <Dialog\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Login</DialogTitle>\r\n\r\n          {error && (\r\n            <DialogContent>\r\n              <DialogContentText color=\"error\" align=\"center\">\r\n                {error}\r\n              </DialogContentText>\r\n            </DialogContent>\r\n          )}\r\n          <DialogContent>\r\n            <TextField\r\n              type=\"text\"\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              onChange={this.handleChange}\r\n              margin=\"dense\"\r\n              autoFocus\r\n              fullWidth\r\n              required\r\n            />\r\n            <TextField\r\n              type=\"password\"\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              onChange={this.handleChange}\r\n              margin=\"dense\"\r\n              fullWidth\r\n              required\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={this.handleLogin}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n            >\r\n              Login\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Guest;\r\n","import React from \"react\";\r\n\r\nimport LoggedIn from \"./LoggedIn\";\r\nimport Guest from \"./Guest\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport UserContext from \"./Context\";\r\n\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst styles = theme => ({\r\n  sidebarToggleIcon: {\r\n    marginRight: \"8px\",\r\n    marginLeft: \"-8px\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: \"-16px\"\r\n    }\r\n  },\r\n  userActionsContainer: {\r\n    marginLeft: \"auto\"\r\n  }\r\n});\r\n\r\nconst Header = props => (\r\n  <AppBar position=\"fixed\">\r\n    <Toolbar>\r\n      <Hidden implementation=\"css\" mdUp>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          className={props.classes.sidebarToggleIcon}\r\n          onClick={props.sidebarToggleHandler}\r\n          aria-label=\"Open drawer\"\r\n        >\r\n          <MenuIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Hidden>\r\n      <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n        testSQL\r\n      </Typography>\r\n      {!process.env.REACT_APP_CLIENT_ONLY && (\r\n        <div className={props.classes.userActionsContainer}>\r\n          <UserContext.Consumer>\r\n            {({ user, isLoaded, login, joinGroup, leaveGroup, logout }) =>\r\n              isLoaded &&\r\n              (user ? (\r\n                <LoggedIn\r\n                  user={user}\r\n                  joinGroup={joinGroup}\r\n                  leaveGroup={leaveGroup}\r\n                  logoutHandler={logout}\r\n                />\r\n              ) : (\r\n                <Guest loginHandler={login} />\r\n              ))\r\n            }\r\n          </UserContext.Consumer>\r\n        </div>\r\n      )}\r\n    </Toolbar>\r\n  </AppBar>\r\n);\r\n\r\nexport default withStyles(styles)(Header);\r\n","import React from \"react\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  seperator: {\r\n    margin: theme.spacing(2)\r\n  }\r\n});\r\n\r\nconst Section = props => {\r\n  const { classes, title, children, padding = 0, ...other } = props;\r\n\r\n  const paperStyle = { padding };\r\n\r\n  return (\r\n    <div className={classes.seperator} {...other}>\r\n      <Typography\r\n        variant=\"body1\"\r\n        color=\"textSecondary\"\r\n        component=\"h3\"\r\n        gutterBottom\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Paper style={paperStyle} elevation={2} square>\r\n        {children}\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Section);\r\n","import React from \"react\";\r\n\r\nimport marked from \"marked\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Stepper from \"@material-ui/core/Stepper\";\r\nimport Step from \"@material-ui/core/Step\";\r\nimport StepButton from \"@material-ui/core/StepButton\";\r\nimport StepLabel from \"@material-ui/core/StepLabel\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport PreviousIcon from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport NextIcon from \"@material-ui/icons/KeyboardArrowRight\";\r\n\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nconst styles = theme => ({\r\n  innerPadding: {\r\n    padding: theme.spacing(2),\r\n    overflow: \"auto\"\r\n  },\r\n  stepperButton: {\r\n    padding: theme.spacing(1),\r\n    margin: -theme.spacing(1)\r\n  },\r\n  stepperLabel: {\r\n    padding: 0\r\n  },\r\n  completedStep: {\r\n    color: \"green !important\"\r\n  },\r\n  divider: {\r\n    marginBottom: theme.spacing(2)\r\n  },\r\n  previousButton: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  bottomActions: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    marginTop: theme.spacing(2)\r\n  }\r\n});\r\n\r\nclass QuestionManager extends React.Component {\r\n  state = {\r\n    allSetNames: [],\r\n    activeSet: null,\r\n    activeQuestionSet: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { allQuestions } = this.props;\r\n\r\n    const allSetNames = [\r\n      ...new Set(allQuestions.map(question => question.set))\r\n    ];\r\n\r\n    const activeSet = allSetNames[0];\r\n\r\n    // Only get the questions in this set.\r\n    const activeQuestionSet = [\r\n      ...allQuestions.filter(question => question.set === activeSet)\r\n    ];\r\n\r\n    this.setState({\r\n      allSetNames,\r\n      activeSet,\r\n      activeQuestionSet\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Required to update the \"active question set\".\r\n   * The props passed is the full question set.\r\n   */\r\n  componentDidUpdate = prevProps => {\r\n    const { allQuestions, activeQuestionIndex } = this.props;\r\n\r\n    const activeQuestion = allQuestions[activeQuestionIndex];\r\n\r\n    if (\r\n      activeQuestionIndex === prevProps.activeQuestionIndex &&\r\n      activeQuestion.completed !==\r\n        prevProps.allQuestions[activeQuestionIndex].completed\r\n    ) {\r\n      // Means that the component has to rebuild the active set, as we created a brand new completed question object.\r\n      const activeQuestionSet = [\r\n        ...allQuestions.filter(\r\n          question => question.set === this.state.activeSet\r\n        )\r\n      ];\r\n\r\n      // Yes, setState is called twice; it's batched.\r\n      this.setState({\r\n        activeQuestionSet\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.props.allQuestions &&\r\n      this.state.activeSet !== activeQuestion.set\r\n    ) {\r\n      // Or, if the set has changed, rebuild the available sets.\r\n      // If this set doesn't exist, rebuilt the sets from the questions.\r\n      // This signifies a new question set.\r\n      if (this.state.allSetNames.includes(activeQuestion.set) === false) {\r\n        const allSetNames = [\r\n          ...new Set(allQuestions.map(question => question.set))\r\n        ];\r\n\r\n        this.setState({ allSetNames });\r\n      }\r\n\r\n      const activeSet = activeQuestion.set;\r\n\r\n      // Means that the component has to rebuild the active set, as we created a brand new completed question object.\r\n      const activeQuestionSet = [\r\n        ...allQuestions.filter(\r\n          question => question.set === this.state.activeSet\r\n        )\r\n      ];\r\n\r\n      // Yes, setState is called twice; it's batched.\r\n      this.setState({\r\n        activeSet,\r\n        activeQuestionSet\r\n      });\r\n    }\r\n  };\r\n\r\n  handleNext = () => {\r\n    const activeQuestionIndex = this.props.allQuestions[\r\n      this.props.activeQuestionIndex\r\n    ].index;\r\n\r\n    const next =\r\n      (activeQuestionIndex + 1) % this.state.activeQuestionSet.length;\r\n\r\n    // Translate the prev index of the active set to allQuestions.\r\n    const allQuestionsIndex = this.state.activeQuestionSet[next].index;\r\n\r\n    this.props.changeQuestionHandler(allQuestionsIndex);\r\n  };\r\n\r\n  handlePrev = () => {\r\n    const activeQuestionIndex = this.props.allQuestions[\r\n      this.props.activeQuestionIndex\r\n    ].index;\r\n\r\n    const prevIndex = activeQuestionIndex - 1;\r\n\r\n    // Check for underflow.\r\n    const prev =\r\n      prevIndex < 0 ? this.state.activeQuestionSet.length - 1 : prevIndex;\r\n\r\n    // Translate the prev index of the active set to allQuestions.\r\n    const allQuestionsIndex = this.state.activeQuestionSet[prev].index;\r\n\r\n    this.props.changeQuestionHandler(allQuestionsIndex);\r\n  };\r\n\r\n  handleQuestionChange = index => () => {\r\n    this.props.changeQuestionHandler(index);\r\n  };\r\n\r\n  handleSetChange = event => {\r\n    const set = event.target.value;\r\n\r\n    // Don't do anything if nothing has changed.\r\n    if (set === this.state.activeSet) return;\r\n\r\n    const { allQuestions } = this.props;\r\n\r\n    // Extract only the questions in this set.\r\n    const activeQuestionSet = [\r\n      ...allQuestions.filter(question => question.set === set)\r\n    ];\r\n\r\n    // Set doesn't exist...\r\n    if (activeQuestionSet.length === 0) return;\r\n\r\n    // Set the active question to the first in the set.\r\n    this.props.changeQuestionHandler(activeQuestionSet[0].index);\r\n\r\n    const activeSet = set;\r\n\r\n    this.setState({\r\n      activeSet,\r\n      activeQuestionSet\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { activeQuestionSet, allSetNames, activeSet } = this.state;\r\n\r\n    // Wait until we have the sets divided.\r\n    if (!activeSet) {\r\n      return <div>Dividing the questions by their sets.</div>;\r\n    }\r\n\r\n    const { classes, allQuestions, activeQuestionIndex } = this.props;\r\n\r\n    const activeQuestion = allQuestions[activeQuestionIndex];\r\n\r\n    const activeStep = activeQuestionSet.indexOf(activeQuestion);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {activeQuestionSet && (\r\n          <Stepper\r\n            activeStep={activeStep}\r\n            className={classes.innerPadding}\r\n            nonLinear\r\n          >\r\n            {activeQuestionSet.map(question => (\r\n              <Step key={question.index}>\r\n                <StepButton\r\n                  className={classes.stepperButton}\r\n                  aria-label={`Question #${question.index}`}\r\n                  onClick={this.handleQuestionChange(question.index)}\r\n                  completed={Boolean(question.completed)}\r\n                >\r\n                  <StepLabel\r\n                    classes={{\r\n                      iconContainer: classes.stepperLabel\r\n                    }}\r\n                    StepIconProps={{\r\n                      classes: {\r\n                        active: classes.activeStep,\r\n                        completed: classes.completedStep\r\n                      }\r\n                    }}\r\n                    error={Boolean(question.error)}\r\n                  />\r\n                </StepButton>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n        )}\r\n        <Divider />\r\n        <div className={classes.innerPadding}>\r\n          {activeQuestion && (\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              component=\"div\"\r\n              color={activeQuestion.error ? \"error\" : \"inherit\"}\r\n              dangerouslySetInnerHTML={{\r\n                __html: marked(activeQuestion.question)\r\n              }}\r\n              gutterBottom\r\n            />\r\n          )}\r\n          <div className={classes.bottomActions}>\r\n            {activeSet && (\r\n              <div>\r\n                <Select value={activeSet} onChange={this.handleSetChange}>\r\n                  {allSetNames.map(name => (\r\n                    <MenuItem key={name} value={name}>\r\n                      {name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </div>\r\n            )}\r\n            <div>\r\n              <Button\r\n                className={classes.previousButton}\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                aria-label=\"Previous question\"\r\n                onClick={this.handlePrev}\r\n              >\r\n                <PreviousIcon />\r\n                <Hidden xsDown implementation=\"css\">\r\n                  Previous\r\n                </Hidden>\r\n              </Button>\r\n              <Button\r\n                className={classes.nextButton}\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                aria-label=\"Next question\"\r\n                onClick={this.handleNext}\r\n              >\r\n                <Hidden xsDown implementation=\"css\">\r\n                  Next\r\n                </Hidden>\r\n                <NextIcon />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(QuestionManager);\r\n","import React from \"react\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DatabaseOutput = ({ columns, values }) => (\r\n  <Table size=\"small\">\r\n    <TableHead>\r\n      <TableRow>\r\n        {columns.map((name, i) => (\r\n          <TableCell key={i}>{name}</TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n    <TableBody>\r\n      {values.map((row, i) => (\r\n        <TableRow key={i}>\r\n          {row.map((value, i) => (\r\n            <TableCell key={i}>{value}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n      ))}\r\n    </TableBody>\r\n  </Table>\r\n);\r\n\r\nDatabaseOutput.propTypes = {\r\n  columns: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  values: PropTypes.arrayOf(\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\r\n  ).isRequired\r\n};\r\n\r\nexport default DatabaseOutput;\r\n","import React from \"react\";\r\n\r\nimport SnackBar from \"@material-ui/core/Snackbar\";\r\nimport SnackBarContent from \"@material-ui/core/SnackbarContent\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\n\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport amber from \"@material-ui/core/colors/amber\";\r\n\r\nimport classNames from \"classnames\";\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon\r\n};\r\n\r\nconst style = theme => ({\r\n  success: {\r\n    backgroundColor: green[600]\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.dark\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700]\r\n  },\r\n  icon: {\r\n    fontSize: 20\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  message: {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  }\r\n});\r\n\r\nclass Feedback extends React.Component {\r\n  queue = [];\r\n\r\n  state = {\r\n    message: null,\r\n    variant: null,\r\n    timestamp: null,\r\n    open: false\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // Skip if no feedback object is passed OR is the same as the previous object.\r\n    if (\r\n      !this.props.timestamp ||\r\n      (typeof prevProps.timestamp !== \"undefined\" &&\r\n        this.props.timestamp === prevProps.timestamp)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // If a new feedback object is passed, and isn't the same as the previous object injected\r\n    this.queue.push({\r\n      message: this.props.message,\r\n      variant: this.props.variant,\r\n      timestamp: this.props.timestamp\r\n    });\r\n\r\n    if (this.state.open) {\r\n      // immediately begin dismissing current message\r\n      // to start showing new one\r\n      return this.setState({ open: false });\r\n    } else {\r\n      return this.processQueue();\r\n    }\r\n  }\r\n\r\n  handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  processQueue = () => {\r\n    if (this.queue.length > 0) {\r\n      const { message, variant, timestamp } = this.queue.shift();\r\n\r\n      this.setState({\r\n        message,\r\n        variant,\r\n        timestamp,\r\n        open: true\r\n      });\r\n    }\r\n  };\r\n\r\n  handleExited = () => this.processQueue();\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const { message, variant, timestamp, open } = this.state;\r\n\r\n    // Return nothing if no message is set yet.\r\n    if (!message) return null;\r\n\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n      <SnackBar\r\n        key={timestamp}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\"\r\n        }}\r\n        open={open}\r\n        autoHideDuration={5000}\r\n        onClose={this.handleClose}\r\n        onExited={this.handleExited}\r\n      >\r\n        <SnackBarContent\r\n          className={classes[variant]}\r\n          aria-describedby=\"feedback-message\"\r\n          message={\r\n            <span id=\"feedback-message\" className={classes.message}>\r\n              <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n              {message}\r\n            </span>\r\n          }\r\n          action={\r\n            <Button\r\n              key=\"close\"\r\n              aria-label=\"Dismiss\"\r\n              size=\"small\"\r\n              onClick={this.handleClose}\r\n            >\r\n              Dismiss\r\n            </Button>\r\n          }\r\n        />\r\n      </SnackBar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(style)(Feedback);\r\n","export class IncorrectAnswer extends Error {}\r\n\r\nconst normalize = string => {\r\n  return string.toLowerCase().replace(/[^\\w]/g, \"\");\r\n};\r\n\r\nconst checkAnswer = (db, sql, question) => {\r\n  // 1. Check to make sure syntax includes certain keywords, if set\r\n  if (question.keywords) {\r\n    const keywords = question.keywords;\r\n    // Change the sql to uppercase, String.includes is case sensitive\r\n    const sqlUppercase = sql.toUpperCase();\r\n\r\n    // Make sure all the keywords exist in the sql query\r\n    let lastIndex = -1;\r\n\r\n    for (let i = 0; i < keywords.length; i++) {\r\n      // Search for the keyword, must come after the previous keyword\r\n      lastIndex = sqlUppercase.indexOf(\r\n        keywords[i].toUpperCase(),\r\n        lastIndex + 1\r\n      );\r\n\r\n      // If the keyword was not found\r\n      if (lastIndex === -1) {\r\n        throw new IncorrectAnswer(\r\n          `Looking for the incursion of the keyword: ${\r\n            keywords[i]\r\n          }, but not found or found in the wrong position!`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const userResults = db.exec(sql);\r\n  const modelResults = db.exec(question.answer);\r\n\r\n  if (!userResults.length && modelResults.length) {\r\n    throw new IncorrectAnswer(`No rows returned!`);\r\n  }\r\n\r\n  const [{ columns: userColumns, values: userValues }] = userResults;\r\n  const [{ columns: modelColumns, values: modelValues }] = modelResults;\r\n\r\n  // 2. Check the same amount of columns exists in both the submitted query and the model query\r\n  if (modelColumns.length !== userColumns.length) {\r\n    throw new IncorrectAnswer(\r\n      `Expected only the following column(s) to be selected: ${modelColumns.join(\r\n        \", \"\r\n      )}!`\r\n    );\r\n  }\r\n\r\n  // 3. Check both result sets are of equal length\r\n  if (modelValues.length !== userValues.length) {\r\n    throw new IncorrectAnswer(\r\n      `Expected a total of ${\r\n        modelValues.length\r\n      } row(s) to be returned, instead got ${userValues.length}!`\r\n    );\r\n  }\r\n\r\n  const normalizedUserColumns = userColumns.map(column => normalize(column));\r\n  const normalizedModelColumns = modelColumns.map(column => normalize(column));\r\n\r\n  normalizedUserColumns.forEach((column, userColumnIndex) => {\r\n    const modelColumnIndex = normalizedModelColumns.indexOf(column);\r\n\r\n    // 4. Does the model column appear in the user selected columns\r\n    if (modelColumnIndex === -1) {\r\n      throw new IncorrectAnswer(\r\n        `Expected only the following column(s) to be selected: ${modelColumns.join(\r\n          \", \"\r\n        )}!`\r\n      );\r\n    }\r\n\r\n    const userColumnValues = userValues.map(result => result[userColumnIndex]);\r\n    const modelColumnValues = modelValues.map(\r\n      result => result[modelColumnIndex]\r\n    );\r\n\r\n    // 5. Ensure every value appear in both set of values\r\n    modelColumnValues.forEach(value => {\r\n      // Check if this model value exists in the users result set\r\n      const foundIndex = userColumnValues.indexOf(value);\r\n\r\n      if (foundIndex === -1) {\r\n        throw new IncorrectAnswer(\r\n          `The column value ${value} was not found in the column ${\r\n            modelColumns[modelColumnIndex]\r\n          }!`\r\n        );\r\n      }\r\n\r\n      // So it exists so remove it from the userColumnValues\r\n      userColumnValues.splice(foundIndex, 1);\r\n    });\r\n  });\r\n\r\n  // if the code executed to this point, the solution is valid\r\n  return true;\r\n};\r\n\r\nexport default checkAnswer;\r\n","const buildQuestions = async (database, availableQuestions) =>\r\n  new Promise(resolve => {\r\n    // Setup the caching.\r\n    window.questionCache = {};\r\n\r\n    return import(\"../index\").then(({ default: allQuestions }) => {\r\n      const questions = allQuestions.reduce((acc, cur, i) => {\r\n        // If the current index is included in the array.\r\n        if (availableQuestions && availableQuestions.indexOf(i) === -1) {\r\n          return acc;\r\n        }\r\n\r\n        const { build } = cur;\r\n\r\n        try {\r\n          const { question, answer } = build(database);\r\n\r\n          acc.push({ index: i, ...cur, question, answer });\r\n\r\n          return acc;\r\n        } catch (Error) {\r\n          // Mark as error question, tried twice can't generate this question.\r\n          acc.push({\r\n            ...cur,\r\n            question: `Error: ${Error.message}`,\r\n            answer: null,\r\n            error: true\r\n          });\r\n\r\n          return acc;\r\n        }\r\n      }, []);\r\n\r\n      return resolve(questions);\r\n    });\r\n  });\r\n\r\nexport default buildQuestions;\r\n","const saveQuestions = allQuestions =>\r\n  localStorage.setItem(\"__testSQL_Questions__\", JSON.stringify(allQuestions));\r\n\r\nexport default saveQuestions;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport RunIcon from \"@material-ui/icons/Done\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\n//import brace from \"brace\";\r\nimport AceEditor from \"react-ace\";\r\n\r\nimport \"brace/mode/sql\";\r\nimport \"brace/theme/tomorrow\";\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    marginRight: 8,\r\n    marginTop: 8\r\n  },\r\n  leftIcon: {\r\n    marginRight: 8\r\n  },\r\n  rightIcon: {\r\n    marginLeft: 8\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20\r\n  },\r\n  codemirror: {\r\n    border: `1px solid ${theme.palette.grey[100]}`\r\n  }\r\n});\r\n\r\nclass DatabaseInput extends React.Component {\r\n  state = {\r\n    statement: \"\"\r\n  };\r\n\r\n  handleChange = statement => this.setState({ statement });\r\n\r\n  handleClear = () => this.setState({ statement: \"\" });\r\n\r\n  handleSubmit = () => this.props.submitHandler(this.state.statement);\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const { statement } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <AceEditor\r\n          mode=\"sql\"\r\n          theme=\"tomorrow\"\r\n          showPrintMargin={false}\r\n          focus\r\n          height=\"9rem\"\r\n          width=\"100%\"\r\n          onChange={this.handleChange}\r\n          value={statement}\r\n          wrapEnabled\r\n        />\r\n\r\n        <Button\r\n          className={classes.button}\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          aria-label=\"Test\"\r\n          onClick={this.handleSubmit}\r\n        >\r\n          Test\r\n          <RunIcon className={classes.rightIcon} />\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          aria-label=\"Clear\"\r\n          onClick={this.handleClear}\r\n        >\r\n          Clear\r\n          <ClearIcon className={classes.rightIcon} />\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nDatabaseInput.propTypes = {\r\n  submitHandler: PropTypes.func\r\n};\r\n\r\nexport default withStyles(styles)(DatabaseInput);\r\n","import React from \"react\";\r\n\r\nimport Section from \"./Section\";\r\nimport Question from \"../Question\";\r\n\r\nimport OutputTable from \"../Database/Output\";\r\n\r\nimport Feedback from \"../Feedback\";\r\n\r\nimport checkAnswer from \"../Question/answer\";\r\n\r\nimport { saveProgress } from \"../Group/API\";\r\n\r\nimport buildQuestions from \"../../questions/utils/buildQuestions\";\r\nimport saveQuestions from \"../../questions/utils/saveQuestions\";\r\n\r\nimport InputForm from \"../Database/Input\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  innerContainerStyle: {\r\n    overflow: \"auto\",\r\n    flexGrow: 1\r\n  },\r\n  // Necessary for content to be below app bar.\r\n  toolbar: theme.mixins.toolbar\r\n});\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    feedback: null,\r\n\r\n    allQuestions: null,\r\n    activeQuestionIndex: 0\r\n  };\r\n\r\n  changeFeedback = feedback =>\r\n    this.setState({\r\n      feedback: { ...feedback, timestamp: new Date().getTime() }\r\n    });\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  getQuestions = async () => {\r\n    let allQuestions;\r\n\r\n    const { user } = this.props;\r\n\r\n    const group = (user && user.group) || null;\r\n\r\n    // Has the group already have generated questions.\r\n    // Joining a group SHOULD remove all questions so they are rebuilt with the new group database.\r\n    if (group && group.questions && group.questions.length > 0) {\r\n      //console.log(\"Used group questions\");\r\n      allQuestions = group.questions;\r\n    } else {\r\n      // Check the localStorage for any cached question sets\r\n      const cachedQuestions = localStorage.getItem(\"__testSQL_Questions__\");\r\n\r\n      if (cachedQuestions && !group) {\r\n        //console.log(\"Used cached questions\");\r\n        // Cached questions, and the user is not in a group.\r\n        allQuestions = JSON.parse(cachedQuestions);\r\n      } else {\r\n        //console.log(\"Built new questions\");\r\n        // Cached questions, but the user is in a group that doesn't have questions.\r\n        // Rebuild the questions for this group.\r\n        allQuestions = await buildQuestions(this.props.currentDatabase);\r\n\r\n        // No group, no cache, so the questions got built, now save them locally.\r\n        saveQuestions(allQuestions);\r\n      }\r\n\r\n      // If the user has no saved questions, then send all the generated questions up to the server.\r\n      // If the user is in a group. Save the progress.\r\n      if (group) {\r\n        saveProgress(allQuestions);\r\n      }\r\n    }\r\n\r\n    return this.setState({ allQuestions });\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // Update the questions if:\r\n    // - The user is logged in, and they left a group;\r\n    // - The database has changed.\r\n    const hasLeftGroup =\r\n      this.props.user &&\r\n      prevProps.user &&\r\n      Boolean(!this.props.user.group) &&\r\n      prevProps.user.group;\r\n\r\n    const hasDatabaseChanged =\r\n      prevProps.currentDatabase &&\r\n      prevProps.currentDatabase.filename !==\r\n        this.props.currentDatabase.filename;\r\n\r\n    if (hasLeftGroup || hasDatabaseChanged) {\r\n      this.getQuestions();\r\n    }\r\n  }\r\n\r\n  changeQuestion = index => this.setState({ activeQuestionIndex: index });\r\n\r\n  runQuery = async sql => {\r\n    const { currentDatabase, loadDatabase } = this.props;\r\n\r\n    const { activeQuestionIndex, allQuestions } = this.state;\r\n\r\n    let results = [];\r\n\r\n    try {\r\n      const output = currentDatabase.exec(sql);\r\n\r\n      // Check if any database actions were ran, if so only update the database.\r\n      if (currentDatabase.getRowsModified()) {\r\n        // TODO: Make this function name a saveDatabase()...\r\n        loadDatabase(currentDatabase);\r\n      } else {\r\n        results = output;\r\n      }\r\n\r\n      if (\r\n        checkAnswer(currentDatabase, sql, allQuestions[activeQuestionIndex])\r\n      ) {\r\n        const updatedAllQuestions = await this.completeCurrentQuestion(sql);\r\n\r\n        // Only save progress if in a group.\r\n        if (this.props.user && this.props.user.group) {\r\n          saveProgress(updatedAllQuestions);\r\n        } else {\r\n          saveQuestions(updatedAllQuestions, this.props.user);\r\n        }\r\n      }\r\n    } catch (Error) {\r\n      this.changeFeedback({ message: Error.message, variant: \"error\" });\r\n    }\r\n\r\n    // Update the results array in the Container component.\r\n    this.props.updateResultsHandler(results);\r\n  };\r\n\r\n  completeCurrentQuestion = sql => {\r\n    const { activeQuestionIndex, allQuestions } = this.state;\r\n\r\n    this.changeFeedback({ message: \"Correct Answer\", variant: \"success\" });\r\n\r\n    const activeQuestion = allQuestions[activeQuestionIndex];\r\n\r\n    // Create a copy of the original question set and update the completed flag of the active question.\r\n    // Immutable \\o/.\r\n    const updatedAllQuestions = allQuestions.map(question => {\r\n      if (Object.is(question, activeQuestion)) {\r\n        return { ...question, completed: true };\r\n      }\r\n\r\n      return question;\r\n    });\r\n\r\n    this.setState({\r\n      allQuestions: updatedAllQuestions\r\n    });\r\n\r\n    return updatedAllQuestions;\r\n  };\r\n\r\n  render() {\r\n    const { allQuestions, activeQuestionIndex, feedback } = this.state;\r\n\r\n    const { results, classes } = this.props;\r\n\r\n    return (\r\n      <main className={classes.innerContainerStyle}>\r\n        <div className={classes.toolbar} />\r\n        <Section title=\"Questions\">\r\n          {allQuestions && (\r\n            <Question\r\n              activeQuestionIndex={activeQuestionIndex}\r\n              allQuestions={allQuestions}\r\n              changeQuestionHandler={this.changeQuestion}\r\n            />\r\n          )}\r\n        </Section>\r\n\r\n        <Section title=\"Statement\" padding=\"16px\">\r\n          <InputForm submitHandler={this.runQuery} />\r\n        </Section>\r\n\r\n        {results.map((result, i) => (\r\n          <Section title=\"Results\" key={i} padding=\"16px\">\r\n            <OutputTable columns={result.columns} values={result.values} />\r\n          </Section>\r\n        ))}\r\n        <Feedback {...feedback} changeHandler={this.changeFeedback} />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Main);\r\n","import React from \"react\";\r\n\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nclass SchemaItem extends React.Component {\r\n  handleClick = () => this.props.showSchemaHandler(this.props.name);\r\n\r\n  render = () => (\r\n    <ListItem onClick={this.handleClick} button>\r\n      <ListItemText primary={this.props.name} />\r\n      <ListItemSecondaryAction>\r\n        <ListItemText secondary={this.props.count} />\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default SchemaItem;\r\n","import React from \"react\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\n\r\nimport SchemaItem from \"./Item\";\r\n\r\nclass Schema extends React.Component {\r\n  state = {\r\n    schema: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.load();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    // Update if the current schema is empty, or theres a new schema coming in.\r\n    return (\r\n      this.state.schema === null ||\r\n      (nextState.schema !== null && this.state.schema !== nextState.schema)\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const hasDatabaseChanged =\r\n      this.props.currentDatabase.lastModified !==\r\n      prevProps.currentDatabase.lastModified;\r\n\r\n    if (hasDatabaseChanged) {\r\n      this.load();\r\n    }\r\n  }\r\n\r\n  load = () => {\r\n    const sql = 'SELECT `tbl_name` FROM `sqlite_master` WHERE `type` = \"table\"';\r\n\r\n    // Destructure the response to get only the values (the real schema data).\r\n    let [{ values: tableNames }] = this.props.currentDatabase.exec(sql);\r\n\r\n    // tableNames are returned as [[0] => \"Tbl_name\", [1] => \"Tbl_name\"]]\r\n    const schema = tableNames.map(([tableName]) => {\r\n      // Extra the row count from each table.\r\n      // Expensive operation!\r\n      const [\r\n        {\r\n          values: [[count]]\r\n        }\r\n      ] = this.props.currentDatabase.exec(`SELECT COUNT(*) FROM ${tableName}`);\r\n\r\n      return {\r\n        name: tableName,\r\n        count\r\n      };\r\n    });\r\n\r\n    this.setState({ schema });\r\n  };\r\n\r\n  render() {\r\n    const { schema } = this.state;\r\n\r\n    if (!schema) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    const { showSchemaHandler } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Typography\r\n          component=\"h3\"\r\n          variant=\"body1\"\r\n          color=\"textSecondary\"\r\n          align=\"center\"\r\n          gutterBottom\r\n        >\r\n          Database Schema\r\n        </Typography>\r\n        <List dense>\r\n          {schema.map(({ name, count }) => (\r\n            <SchemaItem\r\n              key={name}\r\n              name={name}\r\n              count={count}\r\n              showSchemaHandler={showSchemaHandler}\r\n            />\r\n          ))}\r\n        </List>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Schema;\r\n","import React from \"react\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport UploadIcon from \"@material-ui/icons/CloudUploadTwoTone\";\r\n\r\nimport UserContext from \"../Auth/Context\";\r\n\r\nconst displayNone = { display: \"none\" };\r\n\r\nclass UploadDatabase extends React.Component {\r\n  handleUpload = e => {\r\n    const files = e.target.files;\r\n\r\n    // No file selected, return\r\n    if (files.length === 0) return false;\r\n\r\n    const [file] = files;\r\n\r\n    const fileReader = new FileReader();\r\n\r\n    fileReader.onload = () => {\r\n      const typedArray = new Uint8Array(fileReader.result);\r\n\r\n      // Run the submit handler from the parent component\r\n      this.props.uploadDatabaseHandler(typedArray);\r\n    };\r\n\r\n    // Tell the file reader to read the selected file as an array buffer\r\n    fileReader.readAsArrayBuffer(file);\r\n\r\n    // Reset the import back to blank so in theory could re-upload the same file\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <UserContext.Consumer>\r\n        {({ user, isLoaded }) =>\r\n          isLoaded &&\r\n          (user && user.group ? (\r\n            <Tooltip title=\"Disabled while in a group\">\r\n              <span>\r\n                <IconButton\r\n                  component=\"span\"\r\n                  aria-label=\"Upload Database\"\r\n                  disabled\r\n                >\r\n                  <UploadIcon />\r\n                </IconButton>\r\n              </span>\r\n            </Tooltip>\r\n          ) : (\r\n            <React.Fragment>\r\n              <Tooltip title=\"Upload Database\">\r\n                <label>\r\n                  <IconButton component=\"span\" aria-label=\"Upload Database\">\r\n                    <UploadIcon />\r\n                  </IconButton>\r\n                  <input\r\n                    accept=\".db,.sqlite\"\r\n                    onChange={this.handleUpload}\r\n                    style={displayNone}\r\n                    type=\"file\"\r\n                  />\r\n                </label>\r\n              </Tooltip>\r\n            </React.Fragment>\r\n          ))\r\n        }\r\n      </UserContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadDatabase;\r\n","import React from \"react\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport DownloadIcon from \"@material-ui/icons/CloudDownloadTwoTone\";\r\n\r\nimport FileSaver from \"file-saver\";\r\n\r\nclass DownloadDatabase extends React.Component {\r\n  handleDownload = () => {\r\n    const { currentDatabase } = this.props;\r\n\r\n    const blob = new Blob([currentDatabase.export()], {\r\n      type: `application/x-sqlite-3`\r\n    });\r\n\r\n    FileSaver.saveAs(blob, \"testSQL.sqlite\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Tooltip title=\"Download Database\">\r\n        <IconButton\r\n          onClick={this.handleDownload}\r\n          aria-label=\"Download Database\"\r\n        >\r\n          <DownloadIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DownloadDatabase;\r\n","import React from \"react\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nimport Schema from \"../Schema\";\r\nimport UploadDatabase from \"../Database/Upload\";\r\nimport DownloadDatabase from \"../Database/Download\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  drawerDocked: {\r\n    height: \"100%\"\r\n  },\r\n  drawerPaper: {\r\n    width: \"16rem\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      position: \"relative\"\r\n    }\r\n  },\r\n  gutterTop: {\r\n    marginTop: theme.spacing(2)\r\n  },\r\n  container: {\r\n    display: \"flex\"\r\n  },\r\n  drawerBottomActions: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    marginTop: \"auto\",\r\n    marginBottom: \"8px\"\r\n  },\r\n  // Necessary for content to be below app bar.\r\n  toolbar: theme.mixins.toolbar\r\n});\r\n\r\nclass Sidebar extends React.Component {\r\n  handleToggleSidebar = () => this.props.toggleSidebarHandler(false);\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      open,\r\n      showSchemaHandler,\r\n      uploadDatabaseHandler,\r\n      currentDatabase,\r\n      toggleSidebarHandler\r\n    } = this.props;\r\n\r\n    const schema = (\r\n      <Schema\r\n        currentDatabase={currentDatabase}\r\n        showSchemaHandler={showSchemaHandler}\r\n        toggleSidebarHandler={toggleSidebarHandler}\r\n      />\r\n    );\r\n\r\n    const schemaActions = (\r\n      <div className={classes.drawerBottomActions}>\r\n        <UploadDatabase uploadDatabaseHandler={uploadDatabaseHandler} />\r\n        <DownloadDatabase currentDatabase={currentDatabase} />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <Hidden mdUp>\r\n          <Drawer\r\n            anchor=\"left\"\r\n            open={open}\r\n            onClose={this.handleToggleSidebar}\r\n            classes={{\r\n              docked: classes.drawerDocked,\r\n              paper: classes.drawerPaper\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true // Better open performance on mobile.\r\n            }}\r\n          >\r\n            <div className={classes.gutterTop}>{schema}</div>\r\n            {schemaActions}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden implementation=\"css\" smDown>\r\n          <Drawer\r\n            classes={{\r\n              docked: classes.drawerDocked,\r\n              paper: classes.drawerPaper\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            <div className={classes.toolbar} />\r\n            <div className={classes.gutterTop}>{schema}</div>\r\n            {schemaActions}\r\n          </Drawer>\r\n        </Hidden>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Sidebar);\r\n","import React from \"react\";\r\n\r\nimport Main from \"./Main\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nimport UserContext from \"../Auth/Context\";\r\n\r\nconst containerStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  zIndex: 0, // The header shadow will overlap.\r\n  height: \"100%\"\r\n};\r\n\r\nexport default class Container extends React.Component {\r\n  state = {\r\n    results: []\r\n  };\r\n\r\n  handleUpdateResults = results => {\r\n    this.setState({ results });\r\n  };\r\n\r\n  displaySchema = name => {\r\n    const { currentDatabase } = this.props;\r\n\r\n    const results = currentDatabase.exec(`SELECT * FROM ${name} LIMIT 10`);\r\n\r\n    this.handleUpdateResults(results);\r\n\r\n    return this.props.sidebarToggleHandler();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      currentDatabase,\r\n      loadDatabase,\r\n      openSidebar,\r\n      sidebarToggleHandler\r\n    } = this.props;\r\n\r\n    const { results } = this.state;\r\n\r\n    return (\r\n      <div style={containerStyle}>\r\n        <Sidebar\r\n          open={openSidebar}\r\n          currentDatabase={currentDatabase}\r\n          uploadDatabaseHandler={loadDatabase}\r\n          showSchemaHandler={this.displaySchema}\r\n          toggleSidebarHandler={sidebarToggleHandler}\r\n        />\r\n        <UserContext.Consumer>\r\n          {({ isLoaded, user }) =>\r\n            isLoaded && (\r\n              <Main\r\n                user={user}\r\n                results={results}\r\n                updateResultsHandler={this.handleUpdateResults}\r\n                currentDatabase={currentDatabase}\r\n                loadDatabase={loadDatabase}\r\n              />\r\n            )\r\n          }\r\n        </UserContext.Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport Header from \"../Auth\";\r\nimport DatabaseContext from \"../Database/Context\";\r\n\r\nimport Container from \"./Container\";\r\n\r\nconst containerStyle = {\r\n  height: \"100vh\",\r\n  overflow: \"hidden\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\"\r\n};\r\n\r\nexport default class Layout extends React.Component {\r\n  state = {\r\n    openSidebar: false\r\n  };\r\n\r\n  handleToggleSidebar = open =>\r\n    // If the open parameter is not passed it will toggle the previous state.\r\n    this.setState(prevState => ({\r\n      openSidebar:\r\n        typeof open === \"undefined\" ? !prevState.openSidebar : Boolean(open)\r\n    }));\r\n\r\n  render() {\r\n    const { openSidebar } = this.state;\r\n\r\n    return (\r\n      <div style={containerStyle}>\r\n        <Header sidebarToggleHandler={this.handleToggleSidebar} />\r\n\r\n        <DatabaseContext.Consumer>\r\n          {({ database, loadDatabase }) =>\r\n            database ? (\r\n              <Container\r\n                currentDatabase={database}\r\n                loadDatabase={loadDatabase}\r\n                sidebarToggleHandler={this.handleToggleSidebar}\r\n                openSidebar={openSidebar}\r\n              />\r\n            ) : (\r\n              <div>Loading...</div>\r\n            )\r\n          }\r\n        </DatabaseContext.Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\n\r\nimport UserProvider from \"./components/Auth/Provider\";\r\n\r\nimport Layout from \"./components/Layout\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst LoadableDatabaseProvider = React.lazy(() =>\r\n  import(\"./components/Database/Provider\" /* webpackChunkName: \"database\" */)\r\n);\r\n\r\nconst App = () => {\r\n  return (\r\n    <UserProvider>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <LoadableDatabaseProvider>\r\n          <CssBaseline />\r\n          <Layout />\r\n        </LoadableDatabaseProvider>\r\n      </Suspense>\r\n    </UserProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"typeface-roboto\";\r\n\r\nimport App from \"./App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","const handleError = res => {\r\n  if (!res.ok) {\r\n    throw res;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default handleError;\r\n","import React from \"react\";\r\n\r\nconst DatabaseContext = React.createContext({\r\n  database: null,\r\n  loadDatabase: () => {}\r\n});\r\n\r\nexport default DatabaseContext;\r\n","import handleError from \"../../utils/handleError\";\r\n\r\nexport const saveProgress = allQuestions => {\r\n  return fetch(\"/api/group/save-progress\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ questions: allQuestions }),\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  }).then(handleError);\r\n};\r\n\r\nexport const createGroup = (title, databaseID) => {\r\n  const data = { title, databaseID };\r\n\r\n  return fetch(\"/api/group/create\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  }).then(handleError);\r\n};\r\n\r\nexport const updateGroup = (groupId, title) => {\r\n  return fetch(`/api/group/update/${groupId}`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ title }),\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  }).then(handleError);\r\n};\r\n\r\nexport const deleteGroup = id => {\r\n  return fetch(`/api/group/delete/${id}`, {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  })\r\n    .then(handleError)\r\n    .then(res => res.json());\r\n};\r\n\r\nexport const getGroup = id => {\r\n  return fetch(`/api/group/${id}`, {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  })\r\n    .then(handleError)\r\n    .then(res => res.json());\r\n};\r\n\r\nexport const removeUserFromGroup = (groupId, userId) => {\r\n  return fetch(`/api/group/${groupId}/remove/${userId}`, {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  }).then(handleError);\r\n};\r\n\r\nexport const listGroups = () => {\r\n  return fetch(\"/api/group/list/all\", {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  })\r\n    .then(handleError)\r\n    .then(res => res.json());\r\n};\r\n\r\nexport const joinGroup = id => {\r\n  return fetch(`/api/group/join/${id}`, {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  })\r\n    .then(handleError)\r\n    .then(res => res.json());\r\n};\r\n\r\nexport const leaveCurrentGroup = () => {\r\n  return fetch(`/api/group/leave/current`, {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  }).then(handleError);\r\n};\r\n"],"sourceRoot":""}