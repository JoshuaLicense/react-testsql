{"version":3,"sources":["components/SavedDatabase/API.js","components/Group/GroupItem.js","questions/utils/clearQuestions.js","components/Group/GroupList.js","components/Group/CreateGroup.js","components/Group/Manage/stringToColor.js","components/Group/Manage/Charts/BarChart.js","components/Group/Manage/Charts/PieChart.js","components/Group/Manage/Charts/Treemap.js","components/Group/GroupUser.js","components/Group/Manage/index.js","components/Group/GroupManager.js"],"names":["saveDatabase","title","database","blob","Blob","type","data","FormData","set","fetch","method","body","credentials","then","handleError","res","json","loadDatabase","id","arrayBuffer","deleteDatabase","listDatabases","headers","Headers","styles","progress","flex","smallButton","padding","GroupItem","handleJoinGroup","props","joinGroupHandler","group","_id","handleLeaveGroup","leaveGroupHandler","this","dense","completedQuestions","totalQuestions","canManage","isCurrent","ListItem","onClick","disabled","selected","component","button","Typography","color","style","ListItemText","primary","ListItemSecondaryAction","IconButton","Link","to","aria-label","fontSize","React","Component","clearQuestions","localStorage","removeItem","flexSpaceBetween","display","justifyContent","GroupList","state","list","error","componentDidMount","load","a","listGroups","groups","setState","text","handleClose","closeHandler","joinGroup","fileBuffer","typedArray","Uint8Array","loadDatabaseHandler","updatedGroupList","map","listGroup","leaveCurrentGroup","Fragment","DialogTitle","Button","variant","size","DialogContent","DialogContentText","align","List","length","key","DialogActions","CreateGroup","name","selectedDatabase","redirect","handleSubmit","createGroup","handleChange","event","target","value","disableTypography","Grid","container","spacing","item","xs","FormControl","Boolean","aria-describedby","fullWidth","Input","onChange","margin","autoFocus","FormHelperText","Select","inputProps","MenuItem","colorCache","stringToColor","string","hash","i","charCodeAt","toString","substr","tooltip","backgroundColor","border","CustomTooltip","active","payload","label","BarChartContainer","sortedUsers","sort","b","questionsCompleted","width","height","right","bottom","maxBarSize","strokeDasharray","dataKey","allowDecimals","angle","position","content","isAnimationActive","entry","index","fill","username","PureComponent","CustomLabel","PieChartContainer","top","left","nameKey","innerRadius","outerRadius","labelLine","CustomizedContent","depth","x","y","stroke","strokeWidth","strokeOpacity","textAnchor","fillOpacity","gutterBottom","TreemapContainer","GroupUser","handleRemoveUser","removeHandler","user","canRemove","updatedAt","lastActive","Date","toLocaleString","percentage","Math","round","colorCodedAverageText","Red","Green","divider","inset","secondary","closeButton","marginRight","ManageGroup","handleUpdateGroup","match","params","controlledTitle","updateGroup","prevState","userId","removeUserFromGroup","users","filter","e","loadGroup","getGroup","header","AppBar","Toolbar","questionMetrics","setMetrics","md","Paper","elevation","square","disablePadding","sm","xl","GroupManager","currentGroup","path","Dialog","onClose","open","fullScreen","render"],"mappings":"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","file":"static/js/groups.c30a924f.chunk.js","sourcesContent":["import handleError from \"../../utils/handleError\";\r\n\r\nexport const saveDatabase = (title, database) => {\r\n  const blob = new Blob([database], {\r\n    type: `application/x-sqlite-3`\r\n  });\r\n\r\n  const data = new FormData();\r\n\r\n  data.set(\"database\", blob);\r\n\r\n  return fetch(`/api/database/save/${title}`, {\r\n    method: \"POST\",\r\n    body: data,\r\n    credentials: \"same-origin\"\r\n  })\r\n    .then(handleError)\r\n    .then(res => res.json());\r\n};\r\n\r\nexport const loadDatabase = id => {\r\n  return fetch(`/api/database/load/${id}`, {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\"\r\n  })\r\n    .then(handleError)\r\n    .then(res => res.arrayBuffer());\r\n};\r\n\r\nexport const deleteDatabase = id => {\r\n  return fetch(`/api/database/delete/${id}`, {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\"\r\n  }).then(handleError);\r\n};\r\n\r\nexport const listDatabases = () => {\r\n  return fetch(\"/api/database/list\", {\r\n    method: \"GET\",\r\n    credentials: \"same-origin\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\"\r\n    })\r\n  })\r\n    .then(handleError)\r\n    .then(res => res.json());\r\n};\r\n","import React from \"react\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport LeaveIcon from \"@material-ui/icons/ExitToApp\";\r\nimport ManageIcon from \"@material-ui/icons/Settings\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  progress: { flex: \"0 0 40px\" },\r\n  smallButton: { padding: 6 }\r\n};\r\n\r\nexport default class GroupItem extends React.Component {\r\n  handleJoinGroup = () => this.props.joinGroupHandler(this.props.group._id);\r\n\r\n  handleLeaveGroup = () => this.props.leaveGroupHandler();\r\n\r\n  render() {\r\n    const { group, dense } = this.props;\r\n\r\n    const {\r\n      _id: id,\r\n      title,\r\n      completedQuestions = \"-\",\r\n      totalQuestions = \"-\",\r\n      canManage,\r\n      isCurrent\r\n    } = group;\r\n\r\n    return (\r\n      <ListItem\r\n        onClick={this.handleJoinGroup}\r\n        disabled={isCurrent}\r\n        selected={isCurrent}\r\n        component=\"li\"\r\n        button\r\n      >\r\n        <Typography\r\n          color=\"textSecondary\"\r\n          style={styles.progress}\r\n          title={`You have completed ${completedQuestions} out of ${totalQuestions} questions in this group.`}\r\n        >\r\n          {`${completedQuestions}/${totalQuestions}`}\r\n        </Typography>\r\n        <ListItemText primary={title} />\r\n        {(canManage || isCurrent) && (\r\n          <ListItemSecondaryAction>\r\n            {canManage && (\r\n              <IconButton\r\n                style={(dense && styles.smallButton) || {}}\r\n                component={Link}\r\n                to={`/group/manage/${id}/${title}`}\r\n                title=\"Manage this group\"\r\n                aria-label=\"Manage group\"\r\n              >\r\n                <ManageIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            )}\r\n            {isCurrent && (\r\n              <IconButton\r\n                style={(dense && styles.smallButton) || {}}\r\n                color=\"secondary\"\r\n                onClick={this.handleLeaveGroup}\r\n                title=\"Leave this group\"\r\n                aria-label=\"Leave current group\"\r\n              >\r\n                <LeaveIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            )}\r\n          </ListItemSecondaryAction>\r\n        )}\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n","const clearQuestions = () => localStorage.removeItem(\"__testSQL_Questions__\");\r\n\r\nexport default clearQuestions;\r\n","import React from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\n\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { loadDatabase } from \"../SavedDatabase/API\";\r\n\r\nimport GroupItem from \"./GroupItem\";\r\n\r\nimport { listGroups, joinGroup, leaveCurrentGroup } from \"./API\";\r\nimport clearQuestions from \"../../questions/utils/clearQuestions\";\r\n\r\nconst flexSpaceBetween = { display: \"flex\", justifyContent: \"space-between\" };\r\n\r\nclass GroupList extends React.Component {\r\n  state = {\r\n    list: null,\r\n    error: null\r\n  };\r\n\r\n  componentDidMount = () => this.load();\r\n\r\n  load = async () => {\r\n    // Attempt to load all the available groups.\r\n    try {\r\n      const groups = await listGroups();\r\n\r\n      this.setState({ list: groups, error: null });\r\n    } catch (response) {\r\n      const error = await response.text();\r\n\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  handleClose = () => this.props.closeHandler();\r\n\r\n  handleJoinGroup = async id => {\r\n    try {\r\n      const group = await joinGroup(id);\r\n\r\n      // Update the user first. Any group questions already generated will be loaded first.\r\n      // Otherwise <Main> will generate the questions twice; once for the detected database change, then the detected group change.\r\n      this.props.joinGroupHandler(group);\r\n\r\n      // Once the user is marked as in this group, load the group database from the server.\r\n      const fileBuffer = await loadDatabase(group.database);\r\n\r\n      const typedArray = new Uint8Array(fileBuffer);\r\n\r\n      // Now load the database into the client-side sql.js.\r\n      this.props.loadDatabaseHandler(typedArray);\r\n\r\n      // Find the group the user has just joined, and set it as active.\r\n      // This saves pinging the server again to reload the `list` prop.\r\n      const updatedGroupList = this.state.list.map(listGroup => {\r\n        // Update the isCurrent for all the groups in the list, leaving the last joined group as the active one.\r\n        listGroup.isCurrent = group._id === listGroup._id;\r\n\r\n        return listGroup;\r\n      });\r\n\r\n      this.setState({ list: updatedGroupList, error: null });\r\n    } catch (response) {\r\n      const error = await response.text();\r\n\r\n      this.setState({ error });\r\n\r\n      await leaveCurrentGroup();\r\n\r\n      this.props.leaveGroupHandler();\r\n    }\r\n  };\r\n\r\n  handleLeaveGroup = async () => {\r\n    try {\r\n      await leaveCurrentGroup();\r\n\r\n      // Update the isCurrent for all the groups in the list to false\r\n      const updatedGroupList = this.state.list.map(listGroup => {\r\n        listGroup.isCurrent = false;\r\n\r\n        return listGroup;\r\n      });\r\n\r\n      // Clear all the cached questions, this will prompt the generation of a new set.\r\n      clearQuestions();\r\n\r\n      this.props.leaveGroupHandler();\r\n\r\n      this.setState({ list: updatedGroupList, error: null });\r\n    } catch (response) {\r\n      const error = await response.text();\r\n\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { list, error } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <DialogTitle id=\"dialog-title\">\r\n          <div style={flexSpaceBetween}>\r\n            Groups\r\n            <Button\r\n              component={Link}\r\n              to=\"/group/create\"\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n            >\r\n              Create &raquo;\r\n            </Button>\r\n          </div>\r\n        </DialogTitle>\r\n        {error && (\r\n          <DialogContent>\r\n            <DialogContentText color=\"error\" align=\"center\">\r\n              {error}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n        )}\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Groups allow you to customize the experience and track the progress\r\n            of every user that joins your group.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        {list && (\r\n          <List dense={list.length >= 5}>\r\n            {list.map(group => (\r\n              <GroupItem\r\n                key={group._id}\r\n                group={group}\r\n                joinGroupHandler={this.handleJoinGroup}\r\n                leaveGroupHandler={this.handleLeaveGroup}\r\n                dense={list.length >= 5}\r\n              />\r\n            ))}\r\n          </List>\r\n        )}\r\n        <DialogActions>\r\n          <Button onClick={this.handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupList;\r\n","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\n\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nimport { createGroup } from \"./API\";\r\n\r\nimport { listDatabases } from \"../SavedDatabase/API\";\r\n\r\nconst flexSpaceBetween = { display: \"flex\", justifyContent: \"space-between\" };\r\n\r\nclass CreateGroup extends React.Component {\r\n  state = {\r\n    error: null,\r\n    list: null,\r\n\r\n    name: \"\",\r\n    selectedDatabase: \"\",\r\n    redirect: false\r\n  };\r\n\r\n  componentDidMount = () =>\r\n    listDatabases().then(list => this.setState({ list }));\r\n\r\n  handleSubmit = async () => {\r\n    const { name, selectedDatabase } = this.state;\r\n\r\n    try {\r\n      await createGroup(name, selectedDatabase);\r\n\r\n      this.setState({ redirect: true });\r\n    } catch (response) {\r\n      const error = await response.text();\r\n\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { name, error, list, selectedDatabase, redirect } = this.state;\r\n\r\n    if (redirect) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <DialogTitle\r\n          id=\"dialog-title\"\r\n          style={flexSpaceBetween}\r\n          disableTypography\r\n        >\r\n          <Typography variant=\"h6\">Creating a new group</Typography>\r\n          <Button\r\n            component={Link}\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            to=\"/\"\r\n          >\r\n            &laquo; Back\r\n          </Button>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            A group allows others to join and share a common database allowing\r\n            the group owner to customize and track their user's experience.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogContent>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={3}>\r\n              <Typography align=\"right\">Group Name</Typography>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <FormControl\r\n                error={Boolean(error)}\r\n                aria-describedby=\"name-error-text\"\r\n                fullWidth\r\n              >\r\n                <Input\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  onChange={this.handleChange}\r\n                  margin=\"dense\"\r\n                  autoFocus\r\n                  fullWidth\r\n                />\r\n                {error && (\r\n                  <FormHelperText id=\"name-error-text\">{error}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Typography align=\"right\">Shared Database</Typography>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <FormControl fullWidth>\r\n                <Select\r\n                  value={selectedDatabase}\r\n                  onChange={this.handleChange}\r\n                  inputProps={{\r\n                    name: \"selectedDatabase\",\r\n                    id: \"selectedDatabase\"\r\n                  }}\r\n                  fullWidth\r\n                >\r\n                  {list && list.length ? (\r\n                    list.map(database => (\r\n                      <MenuItem key={database._id} value={database._id}>\r\n                        {database.title}\r\n                      </MenuItem>\r\n                    ))\r\n                  ) : (\r\n                    <MenuItem disabled>\r\n                      <em>No saved databases!</em>\r\n                    </MenuItem>\r\n                  )}\r\n                </Select>\r\n                <FormHelperText>\r\n                  This will list all of your saved databases.\r\n                </FormHelperText>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={this.props.closeHandler} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button\r\n            onClick={this.handleSubmit}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n          >\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateGroup;\r\n","const colorCache = {};\r\n\r\nconst stringToColor = string => {\r\n  if (colorCache[string]) return colorCache[string];\r\n\r\n  let hash = 0;\r\n\r\n  for (let i = 0; i < string.length; i++) {\r\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n\r\n  let color = \"#\";\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    let value = (hash >> (i * 8)) & 0xff;\r\n\r\n    color += (\"00\" + value.toString(16)).substr(-2);\r\n  }\r\n\r\n  // Save the cached color for next time.\r\n  colorCache[string] = color;\r\n\r\n  return color;\r\n};\r\n\r\nexport default stringToColor;\r\n","import React from \"react\";\r\nimport ResponsiveContainer from \"recharts/lib/component/ResponsiveContainer\";\r\nimport BarChart from \"recharts/lib/chart/BarChart\";\r\nimport Bar from \"recharts/lib/cartesian/Bar\";\r\nimport XAxis from \"recharts/lib/cartesian/XAxis\";\r\nimport YAxis from \"recharts/lib/cartesian/YAxis\";\r\nimport CartesianGrid from \"recharts/lib/cartesian/CartesianGrid\";\r\nimport Tooltip from \"recharts/lib/component/Tooltip\";\r\nimport Cell from \"recharts/lib/component/Cell\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport stringToColor from \"../stringToColor\";\r\n\r\nconst style = {\r\n  tooltip: {\r\n    padding: \".5rem .75rem\",\r\n    backgroundColor: \"rgba(255, 255, 255)\",\r\n    border: \"2px solid rgba(0, 0, 0)\"\r\n  }\r\n};\r\n\r\nconst CustomTooltip = props => {\r\n  if (props.active) {\r\n    const { payload, label } = props;\r\n\r\n    return (\r\n      <div style={style.tooltip}>\r\n        <Typography variant=\"body1\" color=\"textPrimary\">\r\n          {label}\r\n        </Typography>\r\n        <Typography>\r\n          {`Total Completed:`} <strong>{payload[0].value}</strong>\r\n        </Typography>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default class BarChartContainer extends React.PureComponent {\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    // Sort the users by completed questions.\r\n    const sortedUsers = data.sort(\r\n      (a, b) => a.questionsCompleted < b.questionsCompleted\r\n    );\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" height={280}>\r\n        <BarChart\r\n          data={sortedUsers}\r\n          margin={{ right: 20, bottom: 5 }}\r\n          maxBarSize={10}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"username\" />\r\n          <YAxis\r\n            dataKey=\"questionsCompleted\"\r\n            type=\"number\"\r\n            allowDecimals={false}\r\n            label={{\r\n              value: \"# of Questions Completed\",\r\n              angle: -90,\r\n              position: \"center\"\r\n            }}\r\n          />\r\n          <Tooltip content={CustomTooltip} />\r\n          <Bar\r\n            name=\"Question\"\r\n            dataKey=\"questionsCompleted\"\r\n            isAnimationActive={false}\r\n          >\r\n            {data.map((entry, index) => (\r\n              <Cell\r\n                key={`cell-${index}`}\r\n                fill={stringToColor(entry.username)}\r\n              />\r\n            ))}\r\n          </Bar>\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ResponsiveContainer from \"recharts/lib/component/ResponsiveContainer\";\r\nimport PieChart from \"recharts/lib/chart/PieChart\";\r\nimport Pie from \"recharts/lib/polar/Pie\";\r\nimport Cell from \"recharts/lib/component/Cell\";\r\nimport Tooltip from \"recharts/lib/component/Tooltip\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport stringToColor from \"../stringToColor\";\r\n\r\nconst style = {\r\n  tooltip: {\r\n    padding: \".5rem .75rem\",\r\n    backgroundColor: \"rgba(255, 255, 255)\",\r\n    border: \"2px solid rgba(0, 0, 0)\"\r\n  }\r\n};\r\n\r\nconst CustomLabel = props => props.name;\r\n\r\nconst CustomTooltip = props => {\r\n  if (props.active) {\r\n    const { payload } = props;\r\n\r\n    return (\r\n      <div style={style.tooltip}>\r\n        <Typography variant=\"body1\" color=\"textPrimary\">\r\n          {payload[0].name}\r\n        </Typography>\r\n        <Typography>\r\n          {`${payload[0].payload.label}:`} <strong>{payload[0].value}</strong>\r\n        </Typography>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default class PieChartContainer extends React.Component {\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" height={280}>\r\n        <PieChart margin={{ top: 50, right: 60, left: 60, bottom: 50 }}>\r\n          <Pie\r\n            data={data}\r\n            nameKey=\"set\"\r\n            dataKey=\"total\"\r\n            fill=\"#8884d8\"\r\n            innerRadius=\"70%\"\r\n            outerRadius=\"90%\"\r\n            label={CustomLabel}\r\n            labelLine={false}\r\n            isAnimationActive={false}\r\n          >\r\n            {data.map((entry, index) => (\r\n              <Cell\r\n                key={index}\r\n                label=\"Total Questions\"\r\n                fill={stringToColor(entry.set)}\r\n              />\r\n            ))}\r\n          </Pie>\r\n\r\n          <Pie\r\n            isAnimationActive={false}\r\n            data={data}\r\n            nameKey=\"set\"\r\n            dataKey=\"completed\"\r\n            fill=\"#82ca9d\"\r\n            outerRadius=\"60%\"\r\n          >\r\n            {data.map((entry, index) => (\r\n              <Cell\r\n                key={index}\r\n                label=\"Completed Questions\"\r\n                fill={stringToColor(entry.set)}\r\n              />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip content={CustomTooltip} />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ResponsiveContainer from \"recharts/lib/component/ResponsiveContainer\";\r\nimport Treemap from \"recharts/lib/chart/Treemap\";\r\nimport Tooltip from \"recharts/lib/component/Tooltip\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst style = {\r\n  tooltip: {\r\n    padding: \".5rem .75rem\",\r\n    backgroundColor: \"rgba(255, 255, 255)\",\r\n    border: \"2px solid rgba(0, 0, 0)\"\r\n  }\r\n};\r\n\r\nconst CustomizedContent = props => {\r\n  const { depth, x, y, width, height, index, name } = props;\r\n\r\n  return (\r\n    <g>\r\n      <rect\r\n        x={x}\r\n        y={y}\r\n        width={width}\r\n        height={height}\r\n        style={{\r\n          stroke: \"#fff\",\r\n          strokeWidth: 2 / (depth + 1e-10),\r\n          strokeOpacity: 1 / (depth + 1e-10)\r\n        }}\r\n      />\r\n      {depth === 1 ? (\r\n        <React.Fragment>\r\n          <text\r\n            x={x + width / 2}\r\n            y={y + height / 2 + 7}\r\n            textAnchor=\"middle\"\r\n            fill=\"#fff\"\r\n            fontSize={14}\r\n          >\r\n            {name}\r\n          </text>\r\n          <text\r\n            x={x + 4}\r\n            y={y + 18}\r\n            fill=\"#fff\"\r\n            fontSize={16}\r\n            fillOpacity={0.9}\r\n          >\r\n            Q{index + 1}\r\n          </text>\r\n        </React.Fragment>\r\n      ) : null}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst CustomTooltip = props => {\r\n  if (props.active) {\r\n    const { payload } = props;\r\n\r\n    return (\r\n      <div style={style.tooltip}>\r\n        <Typography variant=\"body1\" color=\"textPrimary\">{`Question ${payload[0]\r\n          .payload.index + 1}`}</Typography>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {payload[0].name}\r\n        </Typography>\r\n        <Typography>\r\n          {`Total Completed:`} <strong>{payload[0].value}</strong>\r\n        </Typography>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default class TreemapContainer extends React.PureComponent {\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" height={280}>\r\n        <Treemap\r\n          data={data}\r\n          dataKey=\"completed\"\r\n          nameKey=\"title\"\r\n          stroke=\"#fff\"\r\n          fill=\"#8884d8\"\r\n          isAnimationActive={false}\r\n          content={<CustomizedContent />}\r\n        >\r\n          <Tooltip content={CustomTooltip} />\r\n        </Treemap>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport RemoveUserIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport Red from \"@material-ui/core/colors/red\";\r\nimport Green from \"@material-ui/core/colors/green\";\r\n\r\nconst styles = {\r\n  smallButton: { padding: 6 }\r\n};\r\n\r\nexport default class GroupUser extends React.Component {\r\n  handleRemoveUser = () => this.props.removeHandler(this.props.user._id);\r\n\r\n  render() {\r\n    const { user, dense } = this.props;\r\n\r\n    const {\r\n      username,\r\n      active,\r\n      totalQuestions,\r\n      questionsCompleted,\r\n      canRemove,\r\n      updatedAt\r\n    } = user;\r\n\r\n    const lastActive = new Date(updatedAt).toLocaleString(\"en-GB\");\r\n\r\n    const percentage = Math.round((questionsCompleted / totalQuestions) * 100);\r\n\r\n    const colorCodedAverageText =\r\n      percentage < 20 ? Red[500] : percentage > 80 ? Green[500] : \"inherit\";\r\n\r\n    return (\r\n      <ListItem divider dense>\r\n        <Typography\r\n          style={{ color: colorCodedAverageText }}\r\n          title={`${username} has completed ${percentage}% (${questionsCompleted}/${totalQuestions}) of the questions.`}\r\n        >{`${percentage}%`}</Typography>\r\n        <ListItemText\r\n          inset\r\n          primary={username}\r\n          secondary={active ? \"Active\" : `Last active ${lastActive}`}\r\n        />\r\n        {canRemove && (\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              style={(dense && styles.smallButton) || {}}\r\n              color=\"secondary\"\r\n              onClick={this.handleRemoveUser}\r\n              aria-label=\"Remove User from the group\"\r\n            >\r\n              <RemoveUserIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        )}\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\n// import DeleteIcon from \"@material-ui/icons/Delete\";\r\n// import UpdateIcon from \"@material-ui/icons/Edit\";\r\n\r\n// import Tile from \"./Tile\";\r\nimport BarChart from \"./Charts/BarChart\";\r\nimport PieChart from \"./Charts/PieChart\";\r\nimport Treemap from \"./Charts/Treemap\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { getGroup, updateGroup, removeUserFromGroup } from \"../API\";\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport GroupUser from \"../GroupUser\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n\r\nimport \"./manageGroup.css\";\r\n\r\nconst style = {\r\n  closeButton: { marginRight: 16 },\r\n  flex: { flex: 1 }\r\n};\r\n\r\nexport default class ManageGroup extends React.Component {\r\n  state = {\r\n    error: null,\r\n    group: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadGroup();\r\n  }\r\n\r\n  handleUpdateGroup = async () => {\r\n    const { id } = this.props.match.params;\r\n    const { controlledTitle } = this.state;\r\n\r\n    await updateGroup(id, controlledTitle);\r\n\r\n    this.setState(prevState => ({\r\n      group: { ...prevState.group, title: controlledTitle }\r\n    }));\r\n  };\r\n\r\n  handleRemoveUser = async userId => {\r\n    await removeUserFromGroup(this.props.match.params.id, userId);\r\n\r\n    this.setState(prevState => ({\r\n      group: {\r\n        ...prevState.group,\r\n        users: [...prevState.group.users.filter(user => user._id !== userId)]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleChange = e => this.setState({ controlledTitle: e.target.value });\r\n\r\n  loadGroup = async () => {\r\n    const { id } = this.props.match.params;\r\n\r\n    try {\r\n      const group = await getGroup(id);\r\n\r\n      this.setState({ group, controlledTitle: group.title });\r\n    } catch (response) {\r\n      const error = await response.text();\r\n\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { title } = this.props.match.params;\r\n\r\n    const { group, error } = this.state;\r\n\r\n    const header = (\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <IconButton\r\n            component={Link}\r\n            color=\"inherit\"\r\n            to=\"/\"\r\n            style={style.closeButton}\r\n            aria-label=\"Close\"\r\n          >\r\n            <CloseIcon fontSize=\"small\" />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\" style={style.flex}>\r\n            {title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n\r\n    if (!group) {\r\n      return (\r\n        <React.Fragment>\r\n          {header}\r\n          <DialogContent>\r\n            <DialogContentText align=\"center\">\r\n              Loading group information...\r\n            </DialogContentText>\r\n          </DialogContent>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    const { users, questionMetrics, setMetrics } = group;\r\n\r\n    if (error) {\r\n      return (\r\n        <React.Fragment>\r\n          {header}\r\n          <DialogContent>\r\n            <DialogContentText color=\"error\" align=\"center\">\r\n              {error}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {header}\r\n\r\n        <div style={{ margin: 16 }}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={4}>\r\n              <Typography\r\n                variant=\"body1\"\r\n                color=\"textSecondary\"\r\n                component=\"h3\"\r\n                gutterBottom\r\n              >\r\n                Members\r\n              </Typography>\r\n              <Paper elevation={2} square>\r\n                <List dense={users.length >= 5} disablePadding>\r\n                  {users.map(user => (\r\n                    <GroupUser\r\n                      key={user._id}\r\n                      user={user}\r\n                      dense={users.length >= 5}\r\n                      removeHandler={this.handleRemoveUser}\r\n                    />\r\n                  ))}\r\n                </List>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={8}>\r\n              <Grid container>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"textSecondary\"\r\n                    component=\"h3\"\r\n                    gutterBottom\r\n                  >\r\n                    Group members progress\r\n                  </Typography>\r\n                  <BarChart data={users} />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} xl={3}>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"textSecondary\"\r\n                    component=\"h3\"\r\n                    gutterBottom\r\n                  >\r\n                    Comparison of question set ratio and their corresponding\r\n                    completed ratio\r\n                  </Typography>\r\n                  <PieChart data={setMetrics} />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} xl={3}>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"textSecondary\"\r\n                    component=\"h3\"\r\n                    gutterBottom\r\n                  >\r\n                    Comparison of question completion\r\n                  </Typography>\r\n                  <Treemap data={questionMetrics} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport GroupList from \"./GroupList\";\r\nimport CreateGroup from \"./CreateGroup\";\r\nimport ManageGroup from \"./Manage\";\r\n\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nexport default class GroupManager extends React.Component {\r\n  handleClose = () => this.props.closeHandler();\r\n\r\n  render() {\r\n    const {\r\n      currentGroup,\r\n      loadDatabaseHandler,\r\n      joinGroupHandler,\r\n      leaveGroupHandler\r\n    } = this.props;\r\n\r\n    const ManageGroupComponent = ({ match }) => (\r\n      <Dialog onClose={this.handleClose} open fullScreen>\r\n        <ManageGroup match={match} closeHandler={this.handleClose} />\r\n      </Dialog>\r\n    );\r\n\r\n    const CreateGroupComponent = () => (\r\n      <Dialog onClose={this.handleClose} open fullWidth>\r\n        <CreateGroup closeHandler={this.handleClose} />\r\n      </Dialog>\r\n    );\r\n\r\n    const GroupListComponent = () => (\r\n      <Dialog onClose={this.handleClose} open fullWidth>\r\n        <GroupList\r\n          currentGroup={currentGroup}\r\n          joinGroupHandler={joinGroupHandler}\r\n          leaveGroupHandler={leaveGroupHandler}\r\n          loadDatabaseHandler={loadDatabaseHandler}\r\n          closeHandler={this.handleClose}\r\n        />\r\n      </Dialog>\r\n    );\r\n\r\n    // Why do some routes use `component` prop and some the `render` prop?\r\n    // https://stackoverflow.com/a/48152635\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route\r\n            path=\"/group/manage/:id/:title\"\r\n            component={ManageGroupComponent}\r\n          />\r\n\r\n          <Route path=\"/group/create\" render={CreateGroupComponent} />\r\n\r\n          <Route render={GroupListComponent} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}